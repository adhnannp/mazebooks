<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Corona Admin</title>
    <!-- plugins:css -->
    <link rel="stylesheet" href="/static/admin/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="/static/admin/vendors/css/vendor.bundle.base.css">
    <!-- endinject -->
    <!-- Plugin css for this page -->
    <link rel="stylesheet" href="/static/admin/vendors/jvectormap/jquery-jvectormap.css">
    <link rel="stylesheet" href="/static/admin/vendors/flag-icon-css/css/flag-icon.min.css">
    <link rel="stylesheet" href="/static/admin/vendors/owl-carousel-2/owl.carousel.min.css">
    <link rel="stylesheet" href="/static/admin/vendors/owl-carousel-2/owl.theme.default.min.css">
    <!-- End plugin css for this page -->
    <!-- inject:css -->
    <!-- endinject -->
    <!-- Layout styles -->
    <link rel="stylesheet" href="/static/admin/css/style.css">
    <!-- End layout styles -->
    <link rel="shortcut icon" href="/static/admin/images/favicon.png" />
  </head>
  <body>
    <div class="container-scroller">
      <!-- partial:partials/_sidebar.html -->
      <nav class="sidebar sidebar-offcanvas" id="sidebar">
        <div class="sidebar-brand-wrapper d-none d-lg-flex align-items-center justify-content-center fixed-top">
          <a class="sidebar-brand brand-logo" href="/admin/home" style="text-decoration: none;"><span style="color: white;">MAZE BOOKS</span></a>
          <a class="sidebar-brand brand-logo-mini" href="/admin/home" style="text-decoration: none;"><span style="color: white;">M</span></a>
        </div>
        <ul class="nav">
          <li class="nav-item profile">
            <div class="profile-desc">
              <div class="profile-pic">
                <% if (admin) { %>
                  <div class="profile-name">
                    <h5 class="mb-0 font-weight-normal"><span class="text-success">&#9673; </span><%= admin.LastName+' '+admin.FirstName %> </h5>
                  </div>
                <% } %>
              </div>
            </div>
          </li>
          <li class="nav-item nav-category">
            <span class="nav-link">Navigation</span>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/home">
              <span class="menu-icon">
                <i class="mdi mdi-speedometer"></i>
              </span>
              <span class="menu-title">Dashboard</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/users">
              <span class="menu-icon">
                <i class="mdi mdi-laptop"></i>
              </span>
              <span class="menu-title">Users</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/products">
              <span class="menu-icon">
                <i class="mdi mdi-playlist-play"></i>
              </span>
              <span class="menu-title">Products</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/categories">
              <span class="menu-icon">
                <i class="mdi mdi-table-large"></i>
              </span>
              <span class="menu-title">Category</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/orders">
              <span class="menu-icon">
                <i class="mdi mdi-chart-bar"></i>
              </span>
              <span class="menu-title">Orders</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/offers">
              <span class="menu-icon">
                <i class="mdi mdi-contacts"></i>
              </span>
              <span class="menu-title">Offers</span>
            </a>
          </li>
          <li class="nav-item menu-items">
            <a class="nav-link" href="/admin/coupons">
              <span class="menu-icon">
                <i class="mdi mdi-security"></i>
              </span>
              <span class="menu-title">Coupons</span>
            </a>
          </li>
        </ul>
      </nav>
      <!-- partial -->
      <div class="container-fluid page-body-wrapper">
        <!-- partial:partials/_navbar.html -->
        <nav class="navbar p-0 fixed-top d-flex flex-row">
          <div class="navbar-brand-wrapper d-flex d-lg-none align-items-center justify-content-center">
            <a class="navbar-brand brand-logo-mini" href="index.html"><img src="/static/admin/images/logo-mini.svg" alt="logo" /></a>
          </div>
          <div class="navbar-menu-wrapper flex-grow d-flex align-items-stretch">
            <button class="navbar-toggler navbar-toggler align-self-center" type="button" data-toggle="minimize">
              <span class="mdi mdi-menu"></span>
            </button>
            <ul class="navbar-nav w-100 d-flex justify-content-between">
              <!-- Logout Button on the Left -->
              <li class="nav-item">
                
              </li>
            
              <!-- Generate Sales Report Button on the Right -->
              <li class="nav-item">
                <form action="/admin/logout" method="post" style="margin: 0;">
                  <button type="submit" class="btn btn-danger">Logout</button>
                </form>
              </li>
            </ul>
            <button class="navbar-toggler navbar-toggler-right d-lg-none align-self-center" type="button" data-toggle="offcanvas">
              <span class="mdi mdi-format-line-spacing"></span>
            </button>
          </div>
        </nav>
        <!-- partial -->
        <div class="main-panel">
          <div class="content-wrapper">
            <div class="row">
              <div class="col-lg-6 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Growth</h4>
                        <div>
                          <button class="btn btn-sm btn-outline-primary" data-timeframe="monthly" onclick="updateChart('monthly')">Monthly Growth</button>
                          <button class="btn btn-sm btn-outline-success" data-timeframe="yearly" onclick="updateChart('yearly')">Yearly Growth</button>
                          <button class="btn btn-sm btn-outline-info" data-timeframe="weekly" onclick="updateChart('weekly')">Weekly Growth</button>
                          <button class="btn btn-sm btn-outline-secondary" data-timeframe="daily" onclick="updateChart('daily')">Daily Growth</button>

                        </div>
                        <canvas id="lineChart" style="height:250px"></canvas>
                    </div>
                </div>
              </div>
              <div class="col-lg-6 grid-margin stretch-card">
                <div class="card">
                  <div class="card-body">
                    <h4 class="card-title">Best Sellers</h4>
                    <canvas id="barChart" style="height:230px"></canvas>
                  </div>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-lg-6 grid-margin stretch-card">
                <div class="card">
                  <div class="card-body">
                    <h4 class="card-title">Best Category</h4>
                    <canvas id="pieChart" style="height:250px"></canvas>
                  </div>
                </div>
              </div>
              <div class="col-lg-6 grid-margin stretch-card">
                <div class="card">
                  <div class="card-body">
                    <h4 class="card-title">Highest Return</h4>
                    <canvas id="doughnutChart" style="height:250px"></canvas>
                  </div>
                </div>
              </div>
            </div>
            <div class="row" id="salesReportSection">
              <div class="col-lg-12 grid-margin stretch-card">
                  <div class="card" > 
                      <div class="card-body">
                          <h4 class="card-title">Sales Report</h4>
                          <form method="GET" action="/admin/home">
                              <div class="row">
                                  <div class="col-md-4">
                                      <select name="sortOption" class="form-control" id="sortOption">
                                          <option value="daily" <%= sortOption === 'daily' ? 'selected' : '' %>>Daily</option>
                                          <option value="weekly" <%= sortOption === 'weekly' ? 'selected' : '' %>>Weekly</option>
                                          <option value="monthly" <%= sortOption === 'monthly' ? 'selected' : '' %>>Monthly</option>
                                          <option value="yearly" <%= sortOption === 'yearly' ? 'selected' : '' %>>Yearly</option>
                                          <option value="custom" <%= sortOption === 'custom' ? 'selected' : '' %>>Custom Date</option>
                                      </select>
                                  </div>
                                  <div class="col-md-4" id="customDateFields" style="display: <%= sortOption === 'custom' ? 'block' : 'none' %>;">
                                      <input type="date" name="startDate" class="form-control" id="startDate" placeholder="Start Date" value="<%= startDateValue %>">
                                      <input type="date" name="endDate" class="form-control" id="endDate" placeholder="End Date" value="<%= endDateValue %>">
                                  </div>
                                  <div class="col-md-4">
                                      <button type="submit" class="btn btn-primary">Filter</button>
                                  </div>
                              </div>
                          </form>
                          <div class="d-flex justify-content-end mt-3">
                              <a href="/admin/home/pdf?sortOption=<%= sortOption %>&startDate=<%= startDateValue %>&endDate=<%= endDateValue %>" class="btn btn-sm btn-danger mr-2">Download PDF</a>
                              <a href="/admin/home/excel?sortOption=<%= sortOption %>&startDate=<%= startDateValue %>&endDate=<%= endDateValue %>" class="btn btn-sm btn-success">Download Excel</a>
                          </div>
                          <div class="table-responsive mt-4">
                              <table class="table">
                                  <thead>
                                      <tr>
                                          <th>Order ID</th>
                                          <th>Billing Name</th>
                                          <th>Date</th>
                                          <th>Coupon Deduction</th>
                                          <th>Offer Deduction</th>
                                          <th>Total</th>
                                          <th>Payment Method</th>
                                      </tr>
                                  </thead>
                                  <tbody>
                                      <% orders.forEach(order => { %>
                                          <tr>
                                              <td><%= order.OrderId %></td>
                                              <td><%= order.BillingName %></td>
                                              <td><%= new Date(order.PlacedAt).toLocaleDateString() %></td>
                                              <td>
                                                  <%= order.CouponDeduction ? order.CouponDeduction.toFixed(2) : '0.00' %>
                                              </td>
                                              <td><%= order.OfferDeduction.toFixed(2) %></td>
                                              <td><%= order.TotalPrice.toFixed(2) %></td>
                                              <td><%= order.PaymentMethod %></td>
                                          </tr>
                                      <% }); %>
                                  </tbody>
                              </table>
                          </div>
                          <div class="mt-4">
                              <h5>Overall Sales Count: <%= salesData.totalOrders || 0 %></h5>
                              <h5>Overall Amount: <%= (salesData.totalSales ? salesData.totalSales.toFixed(2) : '0.00') %></h5>
                              <h5>Overall Discount: <%= (salesData.totalDiscounts ? salesData.totalDiscounts.toFixed(2) : '0.00') %></h5>
                          </div>
                      </div>
                  </div>
              </div>
            </div>
          </div>
        </div>
        <!-- main-panel ends -->
      </div>
      <!-- page-body-wrapper ends -->
    </div>
    <style>
     #chartjs-tooltip {
        position: absolute;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        border-radius: 3px;
        padding: 10px;
        pointer-events: none; /* Prevents the tooltip from interfering with mouse events */
        z-index: 1000; /* Ensures it's on top of other elements */
        opacity: 0; /* Start as hidden */
        transition: opacity 0.2s ease; /* Smooth transition for appearance */
    }

    #chartjs-tooltip::after {
        content: '';
        position: absolute;
        bottom: 100%; /* Position above the tooltip */
        left: 50%; /* Center it */
        margin-left: -5px; /* Half the width of the arrow */
        border-width: 5px; /* Size of the arrow */
        border-style: solid;
        border-color: transparent transparent rgba(0, 0, 0, 0.8) transparent; /* Triangle pointing down */
    }
    html {
      scroll-behavior: smooth;
    }
    </style>
    <!-- container-scroller -->
    <!-- plugins:js -->
    <script src="/static/admin/vendors/js/vendor.bundle.base.js"></script>
    <!-- endinject -->
    <script>
      document.querySelector('select[name="sortOption"]').addEventListener('change', function() {
          const customFields = document.getElementById('customDateFields');
          customFields.style.display = this.value === 'custom' ? 'block' : 'none';
      });
  </script>
 <script>
  document.addEventListener('DOMContentLoaded', function() {
      const sortOption = document.getElementById('sortOption');
      const customDateFields = document.getElementById('customDateFields');
      const startDateInput = document.getElementById('startDate');
      const endDateInput = document.getElementById('endDate');

      // Function to toggle the custom date fields
      const toggleCustomDateFields = () => {
          if (sortOption.value === 'custom') {
              customDateFields.style.display = 'block';
          } else {
              customDateFields.style.display = 'none';
              // Clear the dates if not custom
              startDateInput.value = '';
              endDateInput.value = '';
          }
      };

      // Add event listener for change event on the select element
      sortOption.addEventListener('change', toggleCustomDateFields);

      // Call the function once on page load to set the initial state
      toggleCustomDateFields();
  });
</script>
    <!-- Plugin js for this page -->
    <script src="/static/admin/vendors/progressbar.js/progressbar.min.js"></script>
    <script src="/static/admin/vendors/jvectormap/jquery-jvectormap.min.js"></script>
    <script src="/static/admin/vendors/jvectormap/jquery-jvectormap-world-mill-en.js"></script>
    <script src="/static/admin/vendors/owl-carousel-2/owl.carousel.min.js"></script>
    <!-- End plugin js for this page -->
    <!-- inject:js -->
    <script src="/static/admin/js/off-canvas.js"></script>
    <script src="/static/admin/js/hoverable-collapse.js"></script>
    <script src="/static/admin/js/misc.js"></script>
    <script src="/static/admin/js/settings.js"></script>
    <script src="/static/admin/js/todolist.js"></script>
    <!-- endinject -->
    <!-- Custom js for this page -->
    <script src="/static/admin/js/dashboard.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Initialize Line Chart
    const lineCtx = document.getElementById('lineChart').getContext('2d');
    const lineChart = new Chart(lineCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Growth',
                data: [65, 59, 80, 81, 56, 55, 40],
                fill: false,
                borderColor: 'rgba(75, 192, 192, 1)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });


    // Initialize Bar Chart
    // const barCtx = document.getElementById('barChart').getContext('2d');
    // const barChart = new Chart(barCtx, {
    //     type: 'bar',
    //     data: {
    //         labels: [],
    //         datasets: [{
    //             label: 'Sold Count',
    //             data: [], 
    //             backgroundColor: 'rgba(75, 192, 192, 0.2)',
    //             borderColor: 'rgba(75, 192, 192, 1)',
    //             borderWidth: 1
    //         }]
    //     },
    //     options: {
    //         plugins: {
    //             tooltip: {
    //                 enabled: false,
    //                 external: function(context) {
    //                     let tooltipEl = document.getElementById('chartjs-tooltip');

    //                     if (!tooltipEl) {
    //                         tooltipEl = document.createElement('div');
    //                         tooltipEl.id = 'chartjs-tooltip';
    //                         tooltipEl.innerHTML = '<table></table>';
    //                         document.body.appendChild(tooltipEl);
    //                     }

    //                     const position = context.chart.canvas.getBoundingClientRect();
    //                     tooltipEl.style.opacity = 1;
    //                     tooltipEl.style.position = 'absolute';
    //                     tooltipEl.style.left = ${position.left + context.tooltip.x}px;
    //                     tooltipEl.style.top = ${position.top + context.tooltip.y}px;

    //                     const productIndex = context.tooltip.dataPoints[0].dataIndex;
    //                     const productImage = productData[productIndex].imageUrl; 
    //                     const productName = productData[productIndex].productName; 
    //                     const soldCount = context.tooltip.dataPoints[0].raw; 

              
    //                     const innerHtml = 
    //                         <tr>
    //                             <td>
    //                                 <img src="/static/uploads/${productImage[0]}" style="width: 30px; height: 30px; margin-right: 5px; vertical-align: middle;" />
    //                                 ${productName}
    //                             </td>
    //                         </tr>
    //                         <tr>
    //                             <td>Sold: ${soldCount}</td>
    //                         </tr>
    //                     ;
    //                     tooltipEl.querySelector('table').innerHTML = innerHtml;
    //                 },
    //                 footerFont: {
    //                     size: 10,
    //                 },
    //                 bodyFont: {
    //                     size: 12,
    //                 },
    //                 titleFont: {
    //                     weight: 'bold',
    //                 },
    //             }
    //         },
    //         scales: {
    //             y: {
    //                 beginAtZero: true
    //             },
    //             x: {
    //                 title: {
    //                     display: false,
    //                     text: 'Products',
    //                     font: {
    //                         size: 16,
    //                         weight: 'bold',
    //                     }
    //                 },
    //                 ticks: {
    //                     autoSkip: false, 
    //                     maxRotation: 0, 
    //                 }
    //             }
    //         }
    //     }
    // });

    // Initialize Bar Chart
    const barCtx = document.getElementById('barChart').getContext('2d');
    const barChart = new Chart(barCtx, {
        type: 'bar',
        data: {
            labels: [], // Will be populated later
            datasets: [{
                label: 'Sold Count',
                data: [], // Will be populated later
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            plugins: {
                tooltip: {
                    enabled: false, // Disable default tooltips
                    external: function(context) {
                        // Get the tooltip element
                        let tooltipEl = document.getElementById('chartjs-tooltip');

                        // Create tooltip if it doesn't exist
                        if (!tooltipEl) {
                            tooltipEl = document.createElement('div');
                            tooltipEl.id = 'chartjs-tooltip';
                            tooltipEl.innerHTML = '<table></table>';
                            document.body.appendChild(tooltipEl);
                        }

                        // Show the tooltip when hovered
                        if (context.tooltip.dataPoints.length) {
                            const position = context.chart.canvas.getBoundingClientRect();
                            tooltipEl.style.opacity = 1; // Set opacity to 1
                            tooltipEl.style.position = 'absolute';
                            tooltipEl.style.left = `${position.left + context.tooltip.x}px`;
                            tooltipEl.style.top = `${position.top + context.tooltip.y}px`;

                            // Get the data for the tooltip
                            const productIndex = context.tooltip.dataPoints[0].dataIndex;
                            const productImage = productData[productIndex].imageUrl; // Ensure this returns the correct image URL
                            const productName = productData[productIndex].productName; // Get the product name
                            const soldCount = context.tooltip.dataPoints[0].raw; // Get the sold count

                            // Update the tooltip content
                            const innerHtml = `
                                <tr>
                                    <td>
                                        <img src="/static/uploads/${productImage[0]}" style="width: 30px; height: 30px; margin-right: 5px; vertical-align: middle;" />
                                        ${productName}
                                    </td>
                                </tr>
                                <tr>
                                    <td>Sold: ${soldCount}</td>
                                </tr>
                            `;
                            tooltipEl.querySelector('table').innerHTML = innerHtml;
                        } else {
                            tooltipEl.style.opacity = 0; // Hide tooltip when not hovered
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                },
                x: {
                    title: {
                        display: false,
                        text: 'Products',
                        font: {
                            size: 16,
                            weight: 'bold',
                        }
                    },
                    ticks: {
                        autoSkip: false, // Prevents skipping labels
                        maxRotation: 0, // Prevent rotation of labels
                    }
                }
            }
        }
    });

    // Event listener to manage tooltip visibility on mouse leave
    barCtx.canvas.addEventListener('mouseleave', () => {
        const tooltipEl = document.getElementById('chartjs-tooltip');
        tooltipEl.style.opacity = 0; // Hide tooltip on mouse leave
    });

    // Event listeners to manage tooltip visibility
    barCtx.canvas.addEventListener('mouseleave', () => {
        const tooltipEl = document.getElementById('chartjs-tooltip');
        tooltipEl.style.opacity = 0; // Hide tooltip on mouse leave
    });

    // Initialize Pie Chart
    const pieCtx = document.getElementById('pieChart').getContext('2d');
    const pieChart = new Chart(pieCtx, {
        type: 'pie',
        data: {
            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple'], // Added two more labels
            datasets: [{
                label: 'Sold Count',
                data: [300, 50, 100, 80, 120], // Added two more data points
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)', // New color
                    'rgba(153, 102, 255, 0.2)' // New color
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)', // New color border
                    'rgba(153, 102, 255, 1)' // New color border
                ],
                borderWidth: 1
            }]
        }
    });

    // Initialize Doughnut Chart
    const doughnutCtx = document.getElementById('doughnutChart').getContext('2d');
    const doughnutChart = new Chart(doughnutCtx, {
        type: 'doughnut',
        data: {
            labels: ['Red', 'Blue', 'Yellow'],
            datasets: [{
                label: 'Retuned Count',
                data: [300, 50, 100],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)'
                ],
                borderWidth: 1
            }]
        }
    });
</script>
<script>
  
// Function to clean product names
const cleanProductName = (name) => {
    const maxLength = 12; // Set maximum length for product names
    if (!name) return 'Unknown Product'; // Replace empty names with placeholder
    return name.length > maxLength ? name.substring(0, maxLength) + '...' : name; // Truncate if too long
};

let productData = []; // Declare this globally to access in tooltip

fetch(`/admin/home/dashboard-data?timeFrame=monthly`)
    .then(response => response.json())
    .then(data => {
        const { salesData, productData: fetchedProductData, categoriesData, returnRequests } = data;
        productData = fetchedProductData; // Assign fetched data to global variable


        document.querySelector(`button[data-timeframe=monthly]`).classList.remove('btn-outline-primary');
        document.querySelector(`button[data-timeframe=monthly]`).classList.add(`btn-primary`);

        // Line Chart (Growth)
        const salesLabels = salesData.map(sale => `Month ${sale._id}`);
        const salesValues = salesData.map(sale => sale.totalSales);
        lineChart.data.labels = salesLabels;
        lineChart.data.datasets[0].data = salesValues;
        lineChart.update();

        // Bar Chart (Best Sellers)
        const productLabels = fetchedProductData.map(product => cleanProductName(product.productName)); // Use cleaned names
        const productValues = fetchedProductData.map(product => product.totalSold);
        barChart.data.labels = productLabels; // Set cleaned names as labels
        barChart.data.datasets[0].data = productValues;
        barChart.update();

        // Pie Chart (Best Genre)
        const categoryLabels = categoriesData.map(category => category._id);
        const categoryValues = categoriesData.map(category => category.totalSold);
        pieChart.data.labels = categoryLabels;
        pieChart.data.datasets[0].data = categoryValues;
        pieChart.update();

        // Doughnut Chart (Highest Returns)
        const returnLabels = returnRequests.map(request => request.productName || 'No Name');
        const returnValues = returnRequests.map(request => request.totalReturns);
        doughnutChart.data.labels = returnLabels;
        doughnutChart.data.datasets[0].data = returnValues;
        doughnutChart.update();
    })
    .catch(error => console.error('Error fetching dashboard data:', error));

    // Update chart function to fetch data based on the selected time frame
    const updateChart = async (timeFrame) => {
      try {
          // Make a fetch request to the backend to get updated chart data
          const response = await fetch(`/admin/home/dashboard-data?timeFrame=${timeFrame}`);
          const data = await response.json();

          if (!response.ok) {
              throw new Error(data.error || 'Failed to fetch chart data');
          }

          // Update chart data with fetched data
          let salesData = data.salesData;

          lineChart.data.labels = salesData.map(sale => {
              if (timeFrame === 'monthly') {
                  return `Month ${sale._id}`;
              } else if (timeFrame === 'yearly') {
                  return `Year ${sale._id}`;
              } else if (timeFrame === 'weekly') {
                  return `Week ${sale._id}`;
              } else if (timeFrame === 'daily') {
                  return `Day ${sale._id}`; // Label for daily data
              }
          });

          lineChart.data.datasets[0].data = salesData.map(sale => sale.totalSales);
          lineChart.update(); // Refresh the chart

          // Update button classes based on selected time frame
          const timeFrames = ['monthly', 'yearly', 'weekly', 'daily'];

          // Loop through all time frames and update the button classes
          timeFrames.forEach(frame => {
              const button = document.querySelector(`button[data-timeframe="${frame}"]`);
              if (frame === timeFrame) {
                  button.classList.remove('btn-outline-primary', 'btn-outline-success', 'btn-outline-info', 'btn-outline-secondary');
                  button.classList.add(`btn-${frame === 'monthly' ? 'primary' : frame === 'yearly' ? 'success' : frame === 'weekly' ? 'info' : 'secondary'}`);
              } else {
                  button.classList.remove(`btn-${frame === 'monthly' ? 'primary' : frame === 'yearly' ? 'success' : frame === 'weekly' ? 'info' : 'secondary'}`);
                  button.classList.add(`btn-outline-${frame === 'monthly' ? 'primary' : frame === 'yearly' ? 'success' : frame === 'weekly' ? 'info' : 'secondary'}`);
              }
          });
      } catch (error) {
          console.error('Error updating chart:', error);
      }
    };

// Button click event listeners
document.querySelector('.btn-outline-primary').addEventListener('click', () => updateChart('monthly'));
document.querySelector('.btn-outline-success').addEventListener('click', () => updateChart('yearly'));
document.querySelector('.btn-outline-info').addEventListener('click', () => updateChart('weekly'));
document.querySelector('.btn-outline-secondary').addEventListener('click', () => updateChart('daily'));

</script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
      // Check if the URL has a hash and scroll to the section
      if (window.location.hash) {
          const section = document.querySelector(window.location.hash);
          if (section) {
              section.scrollIntoView({ behavior: 'smooth' });
          }
      }
  });
</script>
    <!-- End custom js for this page -->
  </body>
</html>