<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MAZE BOOKS</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
        <!-- jQuery -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<!-- jQuery Validation Plugin -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
        }
        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        header {
            background-color: #fff;
            padding: 10px 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            max-width: 150px;
        }
        h1 {
            
            color: #333;
            margin: 20px 0;
        }
        .checkout-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
        }
        .address-box, .payment-box, .cart-totals, .selected-products {
            background-color: #fff;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .address-box h3, .payment-box h3, .cart-totals h3, .selected-products h3 {
            margin-bottom: 15px;
            color: #333;
        }
        .edit-link {
            float: right;
            font-size: small;
            color: #3b71ca;
        }
        .add-address-btn {
            display: inline-block;
            background-color: white;
            color: #3b71ca;
            border: 1px solid #3b71ca;
            padding: 8px 15px;
            text-decoration: none;
            border-radius: 3px;
            margin-top: 10px;
        }
        .payment-option {
            margin-bottom: 15px;
        }
        .payment-option input[type="radio"] {
            margin-right: 10px;
        }
        .total-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .button {
            display: block;
            width: 100%;
            padding: 12px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
            margin-top: 10px;
        }
        .continue-btn {
            background-color: #333;
            color: white;
        }
        .continue-btn:hover {
            background-color: #555;
        }
        .secondary-btn {
            background-color: #ddd;
            color: #333;
        }
        .secondary-btn:hover {
            background-color: #ccc;
        }
        .coupon-section {
            margin-top: 20px;
        }
        .coupon-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 3px;
            margin-bottom: 10px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 50%;
            border-radius: 5px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover {
            color: #000;
        }
        .product-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        .product-item:last-child {
            border-bottom: none;
        }
        .product-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            margin-right: 15px;
        }
        .product-details {
            flex-grow: 1;
        }
        .product-name {
            font-weight: bold;
        }
        .product-price {
            color: #666;
        }

        @media (max-width: 768px) {
            .checkout-grid {
                grid-template-columns: 1fr;
            }
            .modal-content {
                width: 90%;
            }
        }
        .selected-products-table {
            width: 100%;
            border-collapse: collapse;
        }

        .selected-products-table th, .selected-products-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .selected-products-table img {
            width: 60px;
            height: 60px;
            object-fit: cover;
        }

        .selected-products-table th {
            background-color: #f8f8f8;
        }

        .error {
            color: red; /* Red color for error messages */
            font-size: 12px; /* Smaller font size */
            margin-top: 5px; /* Space above the error message */
        }
        .coupon-section {
    position: relative; /* Make the section relative for absolute positioning of tooltip */
}

.coupons-link {
    text-decoration: underline;
    cursor: pointer;
    color: #007BFF; /* Bootstrap primary color */
    margin-right: 10px;
}

.coupon-tooltip {
    position: absolute;
    background-color: #fff;
    border: 1px solid #ccc;
    padding: 10px;
    z-index: 1000;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Adding a shadow for depth */
    border-radius: 5px; /* Rounded corners */
}

.coupon-code {
    cursor: pointer;
    display: flex;
    align-items: center;
}

.coupon-details {
    margin-left: 10px;
    font-size: 0.9em; /* Smaller text for details */
    color: #666; /* Lighter color for details */
}

.copy-icon {
    margin-left: 5px;
    cursor: pointer;
    color: #4F2F2D; /* Bootstrap primary color for the icon */
}
.coupon-code.disabled {
    color: #ccc; /* Greyed out text */
    cursor: not-allowed; /* Indicate itâ€™s not clickable */
    text-decoration: line-through; /* Optional: strike-through text */
}

.copy-icon.disabled {
    color: #ccc; /* Greyed out icon */
    pointer-events: none; /* Prevent click event */
}
    </style>
</head>
<body>
    <header>
        <div class="container">
            <p style="text-align: center;">MAZE BOOKS</p>
        </div>
    </header>

    <div class="container">
        <h1>Checkout</h1>
        <div class="checkout-grid">
            <div class="left-column">
                <div class="address-box">
                    <h3>Delivery Address</h3>
                    <!-- Address Select Dropdown -->
                    <select id="addressSelect" class="address-select form-select" onchange="handleAddressChange(this)">
                        <option value="">Select an address</option>
                    
                        <% 
                            // Flag to check if default address exists
                            let defaultAddressExists = false; 
                        %>
                    
                        <% addresses.forEach((address) => { %>
                            <% if (address.IsDefault) { %>
                                <option value="default"
                                    data-fullname="<%= address.FullName %>"
                                    data-address="<%= address.Address %>"
                                    data-city="<%= address.City %>"
                                    data-state="<%= address.State %>"
                                    data-country="<%= address.Country %>"
                                    data-pincode="<%= address.Pincode %>"
                                    data-mobileno="<%= address.MobileNo %>"
                                    data-flatno="<%= address.FlatNo || '' %>"
                                    data-district="<%= address.District %>"
                                    data-landmark="<%= address.Landmark || '' %>"
                                    selected> <!-- Prefill default address -->
                                    Default Address: <%= address.FullName %> - <%= address.Address %>, <%= address.City %>
                                </option>
                                <% defaultAddressExists = true; %> <!-- Set flag to true if default address is found -->
                            <% } %>
                        <% }) %>
                    
                        <% addresses.forEach((address) => { %>
                            <% if (!address.IsDefault) { %> <!-- Exclude default address from regular list -->
                                <option value="<%= address._id %>"
                                    data-fullname="<%= address.FullName %>"
                                    data-address="<%= address.Address %>"
                                    data-city="<%= address.City %>"
                                    data-state="<%= address.State %>"
                                    data-country="<%= address.Country %>"
                                    data-pincode="<%= address.Pincode %>"
                                    data-mobileno="<%= address.MobileNo %>"
                                    data-flatno="<%= address.FlatNo || '' %>"
                                    data-district="<%= address.District %>"
                                    data-landmark="<%= address.Landmark || '' %>"
                                >  
                                    <%= address.FullName %> - <%= address.Address %>, <%= address.City %>
                                </option>
                            <% } %>
                        <% }) %>
                    
                        <option value="new">+ Add New Address</option>
                    </select>
                
                    <!-- Editable Address Fields -->
                    <form id="addressForm">
                        <div id="addressFields" class="address-form container">
                            <div class="row mb-3"> <!-- First Row: Full Name and Mobile Number -->
                                <div class="col-md-6">
                                    <label for="fullName">Full Name</label>
                                    <input type="text" id="fullName" class="form-control" placeholder="Enter full name" required>
                                    <label for="fullName" class="error"></label>
                                </div>
                                <div class="col-md-6">
                                    <label for="mobileNo">Mobile Number</label>
                                    <input type="tel" id="mobileNo" class="form-control" placeholder="Enter mobile number" required>
                                    <label for="mobileNo" class="error"></label>
                                </div>
                            </div>
                            
                            <div class="row mb-3"> <!-- Second Row: Address -->
                                <div class="col-12">
                                    <label for="address">Address</label>
                                    <input type="text" id="address" class="form-control" placeholder="Enter address" required>
                                    <label for="address" class="error"></label>
                                </div>
                            </div>
                
                            <div class="row mb-3"> <!-- Third Row: Landmark -->
                                <div class="col-12">
                                    <label for="landmark">Landmark (Optional)</label>
                                    <input type="text" id="landmark" class="form-control" placeholder="Enter landmark (optional)">
                                    <label for="landmark" class="error"></label>
                                </div>
                            </div>
                
                            <div class="row mb-3"> <!-- Fourth Row: Pincode, Flat No., District -->
                                <div class="col-md-4">
                                    <label for="pincode">Pincode</label>
                                    <input type="text" id="pincode" class="form-control" placeholder="Enter pincode" required>
                                    <label for="pincode" class="error"></label>
                                </div>
                                <div class="col-md-4">
                                    <label for="flatNo">Flat No. (Optional)</label>
                                    <input type="text" id="flatNo" class="form-control" placeholder="Enter flat number (optional)">
                                    <label for="flatNo" class="error"></label>
                                </div>
                                <div class="col-md-4">
                                    <label for="district">District</label>
                                    <input type="text" id="district" class="form-control" placeholder="Enter district" required>
                                    <label for="district" class="error"></label>
                                </div>
                            </div>
                
                            <div class="row mb-3"> <!-- Last Row: City, State, Country -->
                                <div class="col-md-4">
                                    <label for="city">City</label>
                                    <input type="text" id="city" class="form-control" placeholder="Enter city" required>
                                    <label for="city" class="error"></label>
                                </div>
                                <div class="col-md-4">
                                    <label for="state">State</label>
                                    <input type="text" id="state" class="form-control" placeholder="Enter state" required>
                                    <label for="state" class="error"></label>
                                </div>
                                <div class="col-md-4">
                                    <label for="country">Country</label>
                                    <input type="text" id="country" class="form-control" placeholder="Enter country" required>
                                    <label for="country" class="error"></label>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                
                <div class="payment-box">
                    <h3>Select Payment Method</h3>
                    <div class="payment-option">
                        <% if(cartTotal.toFixed(2)>5000) { %>
                            <input type="radio" id="online" name="payment" value="Online Payment" checked>
                            <label for="online">Online Payment</label><br>
                            <input type="radio" id="wallet" name="payment" value="Wallet Payment">
                            <label for="wallet">Wallet Payment</label>
                        <% } else { %>
                            <input type="radio" id="online" name="payment" value="Online Payment" checked>
                            <label for="online">Online Payment</label><br>
                            <input type="radio" id="wallet" name="payment" value="Wallet Payment">
                            <label for="wallet">Wallet Payment</label><br>
                            <input type="radio" id="cod1" name="payment" value="Cash On Delivery">
                            <label for="cod1">Cash on Delivery</label>
                        <% } %>
                    </div>
                    <!-- Add other payment options if needed -->
                </div>
                <div class="selected-products">
                    <h3>Selected Products</h3>
                    <!-- Cart Items Table -->
                    <table class="selected-products-table">
                        <thead>
                            <tr>
                                <th>Image</th>
                                <th>Name</th>
                                <th>Quantity</th>
                                <th>Price of 1</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% cartItems.forEach((item, index) => { %>
                                <tr>
                                    <td><img src="/static/uploads/<%= item.ProductId.Images[0] %>" alt="<%= item.ProductId.Name %>" class="product-image"></td>
                                    <td><%= item.ProductId.Name %></td>
                                    <td><%= item.Quantity %></td>
                                    <td>â‚¹ <%= item.Price.toFixed(2) %></td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="right-column">
                <div class="cart-totals">
                    <h3>CART TOTALS</h3>

                    <!-- subtotal -->
                    <div class="total-row">
                        <span>Subtotal</span>
                        <span>â‚¹ <span id="cart-subtotal"><%= cartSubtotal.toFixed(2) %></span></span>
                    </div>
                
                    <!-- Shipping Information -->
                    <div class="total-row">
                        <span>Shipping: </span>
                        <% if (cartTotal > 499 && cartTotal > 5000) { %>
                            <span>Cash on delivery is unavailable for bulk orders. Please use online payment.</span>
                        <% } else if(cartTotal > 499) { %>
                            <span>Free Shipping</span>
                        <% } else { %>
                            <span>â‚¹ 50 added to shipping</span>
                        <% } %>
                    </div>
                
                    <!-- Total (Subtotal + Shipping if applicable) -->
                    <div class="total-row">
                        <strong>Total</strong>
                        <strong>â‚¹ <span id="cart-total"><%= cartTotal.toFixed(2) %></span></strong>
                        <input type="hidden" id="the-actual-cart-total" value="<%= cartTotal.toFixed(2) %>">
                    </div>
                    <!-- Tooltip Container for Valid Coupons -->
                     <!-- Tooltip Container for Valid Coupons -->
                     <div class="coupon-tooltip" style="display:none;">
                        <h4>Coupons</h4>
                        <ul id="coupon-list">
                            <% if (validCoupons.length < 1) { %>
                                <span class="coupon-code"> 
                                    No Coupon Available
                                </span>
                            <% } else { %>    
                                <% validCoupons.forEach(coupon => { %>
                                    <li>
                                        <span class="coupon-code <%= cartTotal < coupon.MaxAmount ? 'disabled' : '' %>" 
                                            data-clipboard-text="<%= coupon.CouponCode %>">
                                            <%= coupon.CouponCode %>
                                            <span class="coupon-details">
                                                (Min Purchase: <%= coupon.MaxAmount %>)
                                                (<%= coupon.DiscountPercentage%>% off)
                                            </span>&nbsp;
                                            <i class="fas fa-copy copy-icon <%= cartTotal < coupon.MaxAmount ? 'disabled' : '' %>" 
                                                onclick="copyToClipboard('<%= coupon.CouponCode %>')" aria-hidden="true"></i>
                                        </span>
                                    </li>
                                <% }) %>
                            <% } %>
                        </ul>
                    </div>
                    
                    <div class="coupon-section">
                        <!-- Coupons Link -->
                        <span class="coupons-link" id="coupons-link">Coupons</span>
                    
                        <input type="text" class="coupon-input" placeholder="Enter coupon code">
                        <button class="button secondary-btn">Apply Coupon</button>
                    
                        <!-- This will hold the Remove Coupon button and X cross mark -->
                        <div class="remove-coupon-section" style="display:none;">
                            <button class="button remove-coupon-btn remove-coupon-cross"></button>
                        </div>
                    </div>
            
                    <a href="/cart" style="text-decoration: none;"><button class="button secondary-btn">Update Cart</button></a>
                    <!-- Form to Place Order -->
                    <form id="checkout-form" action="/place-order" method="POST">
                        <!-- Payment Method -->
                        <input type="hidden" name="paymentMethod" id="paymentMethod" value="">
                    
                        <!-- Cart Items Details as Hidden Fields -->
                        <% cartItems.forEach((item, index) => { %>
                            <input type="hidden" name="Products[<%= index %>][ProductId]" value="<%= item.ProductId._id %>">
                            <input type="hidden" name="Products[<%= index %>][Quantity]" value="<%= item.Quantity %>">
                        <% }) %>
                    
                        <!-- Total Price -->
                        <input type="hidden" name="TotalPrice" value="<%= cartTotal.toFixed(2) %>">
                        <input type="hidden" name="appliedCouponCode" Value="" id="appliedCoupon">
                        <input type="hidden" name="actualTotalPrice" value="<%= cartTotal.toFixed(2) %>">
                        <input type="hidden" name="priceWithoutDedection" value="<%= actualPriceTotal.toFixed(2) %>">
                    
                        <!-- Address Fields -->
                        <input type="hidden" name="Address[FullName]" value="">
                        <input type="hidden" name="Address[Address]" value="">
                        <input type="hidden" name="Address[MobileNo]" value="">
                        <input type="hidden" name="Address[Pincode]" value="">
                        <input type="hidden" name="Address[FlatNo]" value="">
                        <input type="hidden" name="Address[Country]" value="">
                        <input type="hidden" name="Address[City]" value="">
                        <input type="hidden" name="Address[District]" value="">
                        <input type="hidden" name="Address[Landmark]" value="">
                        <input type="hidden" name="Address[State]" value="">
                    
                        <!-- Submit Button -->
                        <button type="submit" class="button continue-btn">PLACE ORDER</button>
                    </form>
                </div>
                <div id="address-error-message" class="text-danger" style="display: none; margin-top: 10px;">
                    Please select a delivery address.
                </div>
            </div>
        </div>
    </div>
    <%- include('../userLayouts/footer') %>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.7/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        const couponTooltip = document.querySelector('.coupon-tooltip');
        const couponsLink = document.getElementById('coupons-link');
        const applyCouponButton = document.querySelector('.secondary-btn');
        const couponInput = document.querySelector('.coupon-input');
        const cartTotalElement = document.getElementById('cart-total');
        const theActualCartTotal = document.getElementById('the-actual-cart-total').value;
        const totalPriceInput = document.querySelector('input[name="TotalPrice"]');
        const removeCouponSection = document.querySelector('.remove-coupon-section');
        const removeCouponButton = document.querySelector('.remove-coupon-btn');
        const removeCouponCross = document.querySelector('.remove-coupon-cross');
    
        // Show the tooltip when clicking the Coupons link
        couponsLink.addEventListener('click', () => {
            couponTooltip.style.display = couponTooltip.style.display === 'block' ? 'none' : 'block';
        });
    
        // Hide tooltip when clicking outside
        document.addEventListener('click', (event) => {
            if (!event.target.closest('.coupon-section')) {
                couponTooltip.style.display = 'none';
            }
        });
    
        // Function to copy coupon code to clipboard
        function copyToClipboard(couponCode) {
            navigator.clipboard.writeText(couponCode).then(() => {
                Swal.fire({
                    text: 'Coupon copied to clipboard!',
                    icon: 'success',
                    timer: 3000, // Auto close after 3 seconds
                    showConfirmButton: false,
                    position: 'top', // Position at the top
                    toast: true, // Make it small and non-intrusive
                    customClass: {
                        popup: 'small-swal' // Custom class for styling
                    }
                });
            }).catch(err => {
                Swal.fire({
                    text: 'Could not copy text',
                    icon: 'error',
                    timer: 3000,
                    showConfirmButton: false,
                    position: 'top',
                    toast: true,
                    customClass: {
                        popup: 'small-swal'
                    }
                });
            });
        }
    
        // Apply coupon functionality
        applyCouponButton.addEventListener('click', async () => {
            const couponCode = couponInput.value;
    
            // Make an API call to apply the coupon
            const response = await fetch('/checkout/apply-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    couponCode,
                    cartTotal: parseFloat(theActualCartTotal),
                }),
            });
    
            const data = await response.json();
    
            if (response.ok) {
                // Hide the input and "Apply" button, show "Remove" button instead
                applyCouponButton.style.display = 'none';
                couponInput.style.display = 'none';
                document.getElementById("appliedCoupon").value=couponCode;
    
                // Set the Remove button and X mark
                removeCouponButton.innerText = `X  Remove ${couponCode}`;
                removeCouponSection.style.display = 'block';
                removeCouponButton.style.color = 'red'; // Set text color to red
    
                // Update the total price displayed
                cartTotalElement.innerText = data.totalPrice;
                totalPriceInput.value = data.totalPrice; // Update hidden input value
    
                Swal.fire({
                    text: data.message,
                    icon: 'success',
                    timer: 3000,
                    showConfirmButton: false,
                    position: 'top',
                    toast: true,
                    customClass: {
                        popup: 'small-swal'
                    }
                });
            } else {
                Swal.fire({
                    text: data.message,
                    icon: 'error',
                    timer: 3000,
                    showConfirmButton: false,
                    position: 'top',
                    toast: true,
                    customClass: {
                        popup: 'small-swal'
                    }
                });
            }
        });
    
        // Remove coupon functionality
        removeCouponCross.addEventListener('click', async () => {
            const couponCode = couponInput.value;
    
            // Make an API call to remove the coupon
            const response = await fetch('/checkout/remove-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    couponCode,
                    cartTotal: theActualCartTotal
                }),
            });
    
            const data = await response.json();
    
            if (response.ok) {
                // Revert the UI back to original state
                removeCouponSection.style.display = 'none';
                applyCouponButton.style.display = 'inline-block';
                couponInput.style.display = 'inline-block';
                couponInput.value = ''; // Clear the input field
                document.getElementById("appliedCoupon").value=''
                // Update the total price displayed after removing the coupon
                cartTotalElement.innerText = data.totalPrice;
                totalPriceInput.value = data.totalPrice;
    
                Swal.fire({
                    text: data.message,
                    icon: 'success',
                    timer: 3000,
                    showConfirmButton: false,
                    position: 'top',
                    toast: true,
                    customClass: {
                        popup: 'small-swal'
                    }
                });
            } else {
                Swal.fire({
                    text: data.message,
                    icon: 'error',
                    timer: 3000,
                    showConfirmButton: false,
                    position: 'top',
                    toast: true,
                    customClass: {
                        popup: 'small-swal'
                    }
                });
            }
        });
    </script>  
<script>
    function handleAddressChange(selectElement) {
    const selectedOption = selectElement.options[selectElement.selectedIndex];

    // Check if the selected option is for a new address
    if (selectedOption.value === "new") {
        // Clear all fields if adding a new address
        clearAddressFields();
        return;
    }

    // Get data attributes from the selected option
    const fullname = selectedOption.getAttribute("data-fullname");
    const address = selectedOption.getAttribute("data-address");
    const city = selectedOption.getAttribute("data-city");
    const state = selectedOption.getAttribute("data-state");
    const country = selectedOption.getAttribute("data-country");
    const pincode = selectedOption.getAttribute("data-pincode");
    const mobileno = selectedOption.getAttribute("data-mobileno");
    const flatno = selectedOption.getAttribute("data-flatno");
    const district = selectedOption.getAttribute("data-district");
    const landmark = selectedOption.getAttribute("data-landmark");

    // Prefill the fields
    document.getElementById("fullName").value = fullname || '';
    document.getElementById("mobileNo").value = mobileno || '';
    document.getElementById("address").value = address || '';
    document.getElementById("landmark").value = landmark || '';
    document.getElementById("pincode").value = pincode || '';
    document.getElementById("flatNo").value = flatno || '';
    document.getElementById("district").value = district || '';
    document.getElementById("city").value = city || '';
    document.getElementById("state").value = state || '';
    document.getElementById("country").value = country || '';
}

// Function to clear the address fields
function clearAddressFields() {
    document.getElementById("fullName").value = '';
    document.getElementById("mobileNo").value = '';
    document.getElementById("address").value = '';
    document.getElementById("landmark").value = '';
    document.getElementById("pincode").value = '';
    document.getElementById("flatNo").value = '';
    document.getElementById("district").value = '';
    document.getElementById("city").value = '';
    document.getElementById("state").value = '';
    document.getElementById("country").value = '';
}
$(document).ready(function () {
    // Define regex patterns for validation
    const regexPatterns = {
        fullName: /^[A-Za-z]{1,}[A-Za-z\s]{0,}$/,
        mobileNo: /^(?!([0-9])\1{9})[6-9][0-9]{9}$/,
        address: /^[A-Za-z0-9\s,.-]{5,}$/,
        landmark: /^[A-Za-z0-9\s,.-]{3,}$/,
        pincode: /^[0-9]{6}$/,
        flatNo: /^[A-Za-z0-9\s-]{1,}$/,
        district: /^[A-Za-z\s]{2,}$/,
        state: /^[A-Za-z\s]{2,}$/,
        country: /^[A-Za-z\s]{2,}$/,
        city: /^[A-Za-z\s]{2,}$/
    };

    // Validate input fields in real-time
    function validateField(field, pattern) {
        const value = $(field).val().trim();
        const isValid = pattern.test(value);
        $(field).next('.error').text(isValid ? '' : 'Invalid input').css('color', isValid ? 'green' : 'red');
        return isValid;
    }

    // Attach keyup event handlers for real-time validation
    Object.keys(regexPatterns).forEach(function (field) {
        $('#' + field).on('keyup', function () {
            validateField(this, regexPatterns[field]);
        });
    });

    // On form submission, validate all fields
    $('#addressForm').on('submit', function (e) {
        let isFormValid = true;

        // Validate all fields before submission
        Object.keys(regexPatterns).forEach(function (field) {
            const inputField = $('#' + field);
            const isValid = validateField(inputField, regexPatterns[field]);
            isFormValid = isFormValid && isValid;
        });

        if (!isFormValid) {
            e.preventDefault(); // Prevent form submission if invalid
            Swal.fire({
                title: 'Error!',
                text: "Please correct the highlighted errors before submitting the form.",
                icon: 'error',
                confirmButtonText: 'Okay'
            });
        } else {
            // Optionally, you can show a success message or perform additional actions before submission
            Swal.fire({
                title: 'Success!',
                text: "Form is valid! Submitting...",
                icon: 'success',
                confirmButtonText: 'Okay'
            });
        }
    });
    // Fetch and pre-fill fields based on pincode
    $("#pincode").on("blur", function () {
        const pincode = $(this).val();
        if (pincode.length === 6) { // Check if the pincode is 6 digits
            $.ajax({
                url: `https://api.postalpincode.in/pincode/${pincode}`, // Replace with actual API URL
                method: "GET",
                success: function (response) {
                    if (response[0].Status === "Success") {
                        const data = response[0].PostOffice[0];
                        $("#city").val(data.Name); // Assuming the first PostOffice contains city name
                        $("#district").val(data.District);
                        $("#state").val(data.State);
                        $("#country").val("India"); // Set country as India or modify accordingly
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Invalid pincode. Please enter a valid pincode.',
                            icon: 'error',
                            confirmButtonText: 'Okay'
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Error fetching data. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'Okay'
                    });
                }
            });
        }
    });
});

// Function to validate address selection
const regexPatterns = {
    fullName: /^[A-Za-z]{1,}[A-Za-z\s]{0,}$/,   // Full name should have at least one letter
    mobileNo: /^(?!([0-9])\1{9})[6-9][0-9]{9}$/, // Mobile number should start with 6-9 and not have repeated digits
    address: /^[A-Za-z0-9\s,.-]{5,}$/,          // Address must be at least 5 characters long
    landmark: /^[A-Za-z0-9\s,.-]{3,}$/,         // Landmark must be at least 3 characters long
    pincode: /^[0-9]{6}$/,                      // Pincode should be exactly 6 digits
    flatNo: /^[A-Za-z0-9\s-]{1,}$/,             // Flat number should be at least 1 character
    district: /^[A-Za-z\s]{2,}$/,               // District must be at least 2 characters
    state: /^[A-Za-z\s]{2,}$/,                  // State must be at least 2 characters
    country: /^[A-Za-z\s]{2,}$/,                // Country must be at least 2 characters
    city: /^[A-Za-z\s]{2,}$/                    // City must be at least 2 characters
};

function validateAddressSelection() {
    const fullName = document.querySelector('input[name="Address[FullName]"]').value;
    const address = document.querySelector('input[name="Address[Address]"]').value;
    const mobileNo = document.querySelector('input[name="Address[MobileNo]"]').value;
    const pincode = document.querySelector('input[name="Address[Pincode]"]').value;
    const city = document.querySelector('input[name="Address[City]"]').value;
    const state = document.querySelector('input[name="Address[State]"]').value;

    // Check for required fields
    if (!fullName || !address || !mobileNo || !pincode || !city || !state) {
        Swal.fire({
            title: 'Missing Information',
            text: 'Please fill in all required address fields.',
            icon: 'warning',
            confirmButtonText: 'Okay'
        });
        return false;
    }

    // Validate each field against its regex pattern
    if (!regexPatterns.fullName.test(fullName)) {
        Swal.fire({
            title: 'Invalid Full Name',
            text: 'Please enter a valid full name.',
            icon: 'error',
            confirmButtonText: 'Okay'
        });
        return false;
    }

    if (!regexPatterns.mobileNo.test(mobileNo)) {
        Swal.fire({
            title: 'Invalid Mobile Number',
            text: 'Please enter a valid mobile number.',
            icon: 'error',
            confirmButtonText: 'Okay'
        });
        return false;
    }

    if (!regexPatterns.address.test(address)) {
        Swal.fire({
            title: 'Invalid Address',
            text: 'Please enter a valid address with at least 5 characters.',
            icon: 'error',
            confirmButtonText: 'Okay'
        });
        return false;
    }

    if (!regexPatterns.pincode.test(pincode)) {
        Swal.fire({
            title: 'Invalid Pincode',
            text: 'Please enter a valid 6-digit pincode.',
            icon: 'error',
            confirmButtonText: 'Okay'
        });
        return false;
    }

    if (!regexPatterns.city.test(city)) {
        Swal.fire({
            title: 'Invalid City',
            text: 'Please enter a valid city name.',
            icon: 'error',
            confirmButtonText: 'Okay'
        });
        return false;
    }

    if (!regexPatterns.state.test(state)) {
        Swal.fire({
            title: 'Invalid State',
            text: 'Please enter a valid state name.',
            icon: 'error',
            confirmButtonText: 'Okay'
        });
        return false;
    }

    // If all validations pass
    return true;
}

// Function to populate address fields
function populateAddressFields() {
    document.querySelector('input[name="Address[FullName]"]').value = document.getElementById('fullName').value;
    document.querySelector('input[name="Address[MobileNo]"]').value = document.getElementById('mobileNo').value;
    document.querySelector('input[name="Address[Address]"]').value = document.getElementById('address').value;
    document.querySelector('input[name="Address[Landmark]"]').value = document.getElementById('landmark').value || ''; // Optional field
    document.querySelector('input[name="Address[Pincode]"]').value = document.getElementById('pincode').value;
    document.querySelector('input[name="Address[FlatNo]"]').value = document.getElementById('flatNo').value || ''; // Optional field
    document.querySelector('input[name="Address[District]"]').value = document.getElementById('district').value;
    document.querySelector('input[name="Address[City]"]').value = document.getElementById('city').value;
    document.querySelector('input[name="Address[State]"]').value = document.getElementById('state').value;
    document.querySelector('input[name="Address[Country]"]').value = document.getElementById('country').value;
}
window.onload = function() {
    const addressSelect = document.getElementById("addressSelect");
    
    // Trigger the handleAddressChange function if a default address is selected
    if (addressSelect.value) {
        handleAddressChange(addressSelect);
    }
    // Payment method selection
    document.querySelectorAll('input[name="payment"]').forEach(paymentRadio => {
        paymentRadio.addEventListener('change', function () {
            document.getElementById('paymentMethod').value = this.value;
        });
    });
    // Set the initial payment method value
    const initialPaymentMethod = document.querySelector('input[name="payment"]:checked');
    if (initialPaymentMethod) {
        document.getElementById('paymentMethod').value = initialPaymentMethod.value;
    }
};

// Attach validation to form submission
document.getElementById('checkout-form').onsubmit = async function (e) {
    e.preventDefault(); // Prevent the default form submission

    // Populate address fields in the checkout form
    populateAddressFields();

    // Validate Address Selection
    if (!validateAddressSelection()) {
        return false; // If validation fails, do not proceed
    }

    const paymentMethod = document.getElementById('paymentMethod').value;
    if (!paymentMethod) {
        Swal.fire({
            title: 'Warning!',
            text: 'Please select a payment method.',
            icon: 'warning',
            confirmButtonText: 'Okay'
        });
        return false;
    }

    // Handle Online Payment
    if (paymentMethod === 'Online Payment') {
        try {
            const orderDetails = {
                paymentMethod: paymentMethod,
                Products: [...document.querySelectorAll('input[name^="Products"][name$="[ProductId]"]')].map(input => {
                    const index = input.name.match(/\d+/)[0]; // Get the index from the input name
                    const productId = input.value; // Fetch product ID directly from this input
                    const quantity = document.querySelector(`input[name="Products[${index}][Quantity]"]`).value; // Fetch the corresponding quantity
                    
                    return {
                        ProductId: productId,
                        Quantity: quantity
                    };
                }),
                TotalPrice: document.querySelector('input[name="TotalPrice"]').value,
                appliedCouponCode: document.getElementById("appliedCoupon").value,
                actualTotalPrice: document.querySelector('input[name="actualTotalPrice"]').value,
                priceWithoutDedection: document.querySelector('input[name="priceWithoutDedection"]').value,
                Address: {
                    FullName: document.querySelector('input[name="Address[FullName]"]').value,
                    Address: document.querySelector('input[name="Address[Address]"]').value,
                    MobileNo: document.querySelector('input[name="Address[MobileNo]"]').value,
                    Pincode: document.querySelector('input[name="Address[Pincode]"]').value,
                    FlatNo: document.querySelector('input[name="Address[FlatNo]"]').value,
                    Country: document.querySelector('input[name="Address[Country]"]').value,
                    City: document.querySelector('input[name="Address[City]"]').value,
                    District: document.querySelector('input[name="Address[District]"]').value,
                    Landmark: document.querySelector('input[name="Address[Landmark]"]').value,
                    State: document.querySelector('input[name="Address[State]"]').value,
                }
            };

            // Send request to backend to create Razorpay order
            const response = await fetch('/place-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(orderDetails)
            });

            if (!response.ok) {
                const errorData = await response.json();
                Swal.fire({
                    title: 'Error!',
                    text: `Error: ${errorData.message}`,
                    icon: 'error',
                    confirmButtonText: 'Okay'
                });
                console.error('Server Error:', errorData);
                return;
            }

            const data = await response.json();
            console.log('Server Response:', data);

            // Proceed if Razorpay order is created
            if (data.razorpayOrderId) {
                initiateRazorpayPayment(data); // Call your Razorpay payment function
            } else {
                Swal.fire({
                    title: 'Order Creation Failed',
                    text: 'Failed to create order',
                    icon: 'warning',
                    confirmButtonText: 'Okay'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Processing Error',
                text: 'There was an error processing your request. Please try again.',
                icon: 'error',
                confirmButtonText: 'Okay'
            });
        }
    }else if (paymentMethod === 'Wallet Payment') {
        try {
            const orderDetails = {
                paymentMethod: paymentMethod,
                Products: [...document.querySelectorAll('input[name^="Products"][name$="[ProductId]"]')].map(input => {
                    const index = input.name.match(/\d+/)[0]; // Get the index from the input name
                    const productId = input.value; // Fetch product ID directly from this input
                    const quantity = document.querySelector(`input[name="Products[${index}][Quantity]"]`).value; // Fetch the corresponding quantity
                    
                    return {
                        ProductId: productId,
                        Quantity: quantity
                    };
                }),
                TotalPrice: document.querySelector('input[name="TotalPrice"]').value,
                appliedCouponCode: document.getElementById("appliedCoupon").value,
                actualTotalPrice: document.querySelector('input[name="actualTotalPrice"]').value,
                priceWithoutDedection: document.querySelector('input[name="priceWithoutDedection"]').value,
                Address: {
                    FullName: document.querySelector('input[name="Address[FullName]"]').value,
                    Address: document.querySelector('input[name="Address[Address]"]').value,
                    MobileNo: document.querySelector('input[name="Address[MobileNo]"]').value,
                    Pincode: document.querySelector('input[name="Address[Pincode]"]').value,
                    FlatNo: document.querySelector('input[name="Address[FlatNo]"]').value,
                    Country: document.querySelector('input[name="Address[Country]"]').value,
                    City: document.querySelector('input[name="Address[City]"]').value,
                    District: document.querySelector('input[name="Address[District]"]').value,
                    Landmark: document.querySelector('input[name="Address[Landmark]"]').value,
                    State: document.querySelector('input[name="Address[State]"]').value,
                }
            };

            // Send request to backend to create Razorpay order
            const response = await fetch('/place-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(orderDetails)
            });

            if (!response.ok) {
                const errorData = await response.json();
                Swal.fire({
                    title: 'Error!',
                    text: `Error: ${errorData.message}`,
                    icon: 'error',
                    confirmButtonText: 'Okay'
                });
                console.error('Server Error:', errorData);
                return;
            }

            const data = await response.json();
            console.log('Server Response:', data);

            // If wallet payment is processed successfully
            if (data.success) {
                window.location.href = `/order-success?orderId=${data.orderId}`; // Redirect to success page with order ID
            } else {
                Swal.fire({
                    title: 'Payment Failed',
                    text: 'There was an issue processing your payment with the wallet. Please try again.',
                    icon: 'warning',
                    confirmButtonText: 'Okay'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Processing Error',
                text: 'There was an error processing your request. Please try again.',
                icon: 'error',
                confirmButtonText: 'Okay'
            });
        }
    } else {
        // If not online payment, submit the form normally
        this.submit(); // Submit the form for other payment methods
    }
};

// Razorpay payment initiation function
function initiateRazorpayPayment(data) {
            let paymentSuccess = false; // Flag to check payment status

            var options = {
                key: data.key, // Your Razorpay key
                amount: data.amount, // Amount in paise
                currency: data.currency,
                name: "MAZE BOOKS",
                description: "Test Transaction",
                order_id: data.razorpayOrderId, // Order ID created in backend
                handler: async function (response) {
                    paymentSuccess = true; // Payment was successful

                    // Send payment verification request to server
                    const verifyResponse = await fetch('/verify-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            razorpayPaymentId: response.razorpay_payment_id,
                            razorpayOrderId: data.razorpayOrderId,
                            razorpaySignature: response.razorpay_signature
                        })
                    });
                    paymentSuccess = true;
                    const verificationData = await verifyResponse.json();
                    if (verificationData.success) {
                        // Redirect or show success message
                        paymentSuccess = true;
                        window.location.href = `/order-success?orderId=${verificationData.orderId}`;
                    } else {
                        Swal.fire({
                            title: 'Payment Verification Failed',
                            text: 'There was an issue verifying your payment. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'Okay'
                        });
                    }
                },
                prefill: {
                    name: "",
                    email: '',
                    contact: ""
                },
                theme: {
                    color: "#333"
                }
            };

            const razorpay = new Razorpay(options);

            // Open the Razorpay payment modal
            razorpay.open();

            // Check if the modal was closed without payment
            razorpay.on('payment.failed', function(response) {
                // Handle the payment failure case if needed
            });

            // Use a simple setTimeout to check if the payment was completed after a few seconds
            const checkPaymentStatus = setInterval(() => {
                if (paymentSuccess) {
                    clearInterval(checkPaymentStatus); // Clear interval if payment is successful
                } else if (!razorpay.isOpen) {
                    clearInterval(checkPaymentStatus); // Clear interval if modal is closed
                    // Show a sweet alert for order failure
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Failed',
                        text: 'Your order was not completed. Please try again.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        // Redirect to order history after alert is acknowledged
                        window.location.href = "/myaccount/order-history";
                    });
                }
            }, 1000); // Check every second
        }
</script>
</body>
</html>