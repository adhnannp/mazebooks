<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coza Store Checkout</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
        }
        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        header {
            background-color: #fff;
            padding: 10px 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .logo {
            max-width: 150px;
        }
        h1 {
            
            color: #333;
            margin: 20px 0;
        }
        .checkout-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
        }
        .address-box, .payment-box, .cart-totals, .selected-products {
            background-color: #fff;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .address-box h3, .payment-box h3, .cart-totals h3, .selected-products h3 {
            margin-bottom: 15px;
            color: #333;
        }
        .edit-link {
            float: right;
            font-size: small;
            color: #3b71ca;
        }
        .add-address-btn {
            display: inline-block;
            background-color: white;
            color: #3b71ca;
            border: 1px solid #3b71ca;
            padding: 8px 15px;
            text-decoration: none;
            border-radius: 3px;
            margin-top: 10px;
        }
        .payment-option {
            margin-bottom: 15px;
        }
        .payment-option input[type="radio"] {
            margin-right: 10px;
        }
        .total-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .button {
            display: block;
            width: 100%;
            padding: 12px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
            margin-top: 10px;
        }
        .continue-btn {
            background-color: #333;
            color: white;
        }
        .continue-btn:hover {
            background-color: #555;
        }
        .secondary-btn {
            background-color: #ddd;
            color: #333;
        }
        .secondary-btn:hover {
            background-color: #ccc;
        }
        .coupon-section {
            margin-top: 20px;
        }
        .coupon-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 3px;
            margin-bottom: 10px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 50%;
            border-radius: 5px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover {
            color: #000;
        }
        .product-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        .product-item:last-child {
            border-bottom: none;
        }
        .product-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            margin-right: 15px;
        }
        .product-details {
            flex-grow: 1;
        }
        .product-name {
            font-weight: bold;
        }
        .product-price {
            color: #666;
        }

        @media (max-width: 768px) {
            .checkout-grid {
                grid-template-columns: 1fr;
            }
            .modal-content {
                width: 90%;
            }
        }
        .selected-products-table {
            width: 100%;
            border-collapse: collapse;
        }

        .selected-products-table th, .selected-products-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .selected-products-table img {
            width: 60px;
            height: 60px;
            object-fit: cover;
        }

        .selected-products-table th {
            background-color: #f8f8f8;
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <p style="text-align: center;">MAZE BOOKS</p>
        </div>
    </header>

    <div class="container">
        <h1>Checkout</h1>
        <div class="checkout-grid">
            <div class="left-column">
                <div class="address-box">
                    <h3>Delivery Address</h3>
                    <!-- Address Select Dropdown -->
                    <select id="addressSelect" class="address-select form-select" onchange="handleAddressChange(this)">
                        <option value="">Select an address</option>
                        <% addresses.forEach((address, index) => { %>
                            <option value="<%= address._id %>"
                                data-fullname="<%= address.FullName %>"
                                data-address="<%= address.Address %>"
                                data-city="<%= address.City %>"
                                data-state="<%= address.State %>"
                                data-country="<%= address.Country %>"
                                data-pincode="<%= address.Pincode %>"
                                data-mobileno="<%= address.MobileNo %>"
                                data-flatno="<%= address.FlatNo || '' %>"
                                data-district="<%= address.District %>"
                                data-landmark="<%= address.Landmark || '' %>">
                                <%= address.FullName %> - <%= address.Address %>, <%= address.City %>
                            </option>
                        <% }) %>
                        <option value="new">+ Add New Address</option>
                    </select>

                    <!-- Editable Address Fields -->
                    <div id="addressFields" class="address-form">
                        <input type="text" id="fullName" class="form-control" placeholder="Full Name">
                        <input type="text" id="address" class="form-control" placeholder="Address">
                        <input type="text" id="city" class="form-control" placeholder="City">
                        <input type="text" id="state" class="form-control" placeholder="State">
                        <input type="text" id="country" class="form-control" placeholder="Country">
                        <input type="text" id="pincode" class="form-control" placeholder="Pincode">
                        <input type="tel" id="mobileNo" class="form-control" placeholder="Mobile Number">
                        <input type="text" id="flatNo" class="form-control" placeholder="Flat No. (Optional)">
                        <input type="text" id="district" class="form-control" placeholder="District">
                        <input type="text" id="landmark" class="form-control" placeholder="Landmark (Optional)">
                    </div>
                </div>
                <div class="payment-box">
                    <h3>Select Payment Method</h3>
                    <div class="payment-option">
                        <% if(cartTotal.toFixed(2)>5000) { %>
                            <input type="radio" id="online" name="payment" value="Online Payment" checked>
                            <label for="online">Online Payment</label><br>
                            <input type="radio" id="wallet" name="payment" value="Wallet Payment">
                            <label for="wallet">Wallet Payment</label>
                        <% } else { %>
                            <input type="radio" id="online" name="payment" value="Online Payment" checked>
                            <label for="online">Online Payment</label><br>
                            <input type="radio" id="wallet" name="payment" value="Wallet Payment">
                            <label for="wallet">Wallet Payment</label><br>
                            <input type="radio" id="cod1" name="payment" value="Cash On Delivery">
                            <label for="cod1">Cash on Delivery</label>
                        <% } %>
                    </div>
                    <!-- Add other payment options if needed -->
                </div>
                <div class="selected-products">
                    <h3>Selected Products</h3>
                    <!-- Cart Items Table -->
                    <table class="selected-products-table">
                        <thead>
                            <tr>
                                <th>Image</th>
                                <th>Name</th>
                                <th>Quantity</th>
                                <th>Price of 1</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% cartItems.forEach((item, index) => { %>
                                <tr>
                                    <td><img src="/static/uploads/<%= item.ProductId.Images[0] %>" alt="<%= item.ProductId.Name %>" class="product-image"></td>
                                    <td><%= item.ProductId.Name %></td>
                                    <td><%= item.Quantity %></td>
                                    <td>₹ <%= item.Price.toFixed(2) %></td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="right-column">
                <div class="cart-totals">
                    <h3>CART TOTALS</h3>

                    <!-- subtotal -->
                    <div class="total-row">
                        <span>Subtotal</span>
                        <span>₹ <span id="cart-subtotal"><%= cartSubtotal.toFixed(2) %></span></span>
                    </div>
                
                    <!-- Shipping Information -->
                    <div class="total-row">
                        <span>Shipping: </span>
                        <% if (cartTotal > 499 && cartTotal > 5000) { %>
                            <span>Cash on delivery is unavailable for bulk orders. Please use online payment.</span>
                        <% } else if(cartTotal > 499) { %>
                            <span>Free Shipping</span>
                        <% } else { %>
                            <span>₹ 50 added to shipping</span>
                        <% } %>
                    </div>
                
                    <!-- Total (Subtotal + Shipping if applicable) -->
                    <div class="total-row">
                        <strong>Total</strong>
                        <strong>₹ <span id="cart-total"><%= cartTotal.toFixed(2) %></span></strong>
                    </div>
                    <div class="coupon-section">
                        <input type="text" class="coupon-input" placeholder="Enter coupon code">
                        <button class="button secondary-btn">Apply Coupon</button>
                    </div>
                    <a href="/cart" style="text-decoration: none;"><button class="button secondary-btn">Update Cart</button></a>
                    <!-- Form to Place Order -->
                    <form id="checkout-form" action="/place-order" method="POST">
                        <!-- Payment Method -->
                        <input type="hidden" name="paymentMethod" id="paymentMethod" value="">
                    
                        <!-- Cart Items Details as Hidden Fields -->
                        <% cartItems.forEach((item, index) => { %>
                            <input type="hidden" name="Products[<%= index %>][ProductId]" value="<%= item.ProductId._id %>">
                            <input type="hidden" name="Products[<%= index %>][Quantity]" value="<%= item.Quantity %>">
                        <% }) %>
                    
                        <!-- Total Price -->
                        <input type="hidden" name="TotalPrice" value="<%= cartTotal.toFixed(2) %>">
                    
                        <!-- Address Fields -->
                        <input type="hidden" name="Address[FullName]" value="">
                        <input type="hidden" name="Address[Address]" value="">
                        <input type="hidden" name="Address[MobileNo]" value="">
                        <input type="hidden" name="Address[Pincode]" value="">
                        <input type="hidden" name="Address[FlatNo]" value="">
                        <input type="hidden" name="Address[Country]" value="">
                        <input type="hidden" name="Address[City]" value="">
                        <input type="hidden" name="Address[District]" value="">
                        <input type="hidden" name="Address[Landmark]" value="">
                        <input type="hidden" name="Address[State]" value="">
                    
                        <!-- Submit Button -->
                        <button type="submit" class="button continue-btn">PLACE ORDER</button>
                    </form>
                </div>
                <div id="address-error-message" class="text-danger" style="display: none; margin-top: 10px;">
                    Please select a delivery address.
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.7/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script>
    function handleAddressChange(select) {
        if (select.value === 'new') {
            clearAddressFields();
        } else if (select.value) {
            fillAddressFields(select.options[select.selectedIndex].dataset);
        }
    }

    function fillAddressFields(data) {
        document.getElementById('fullName').value = data.fullname;
        document.getElementById('address').value = data.address;
        document.getElementById('city').value = data.city;
        document.getElementById('state').value = data.state;
        document.getElementById('country').value = data.country;
        document.getElementById('pincode').value = data.pincode;
        document.getElementById('mobileNo').value = data.mobileno;
        document.getElementById('flatNo').value = data.flatno || '';
        document.getElementById('district').value = data.district;
        document.getElementById('landmark').value = data.landmark || '';
    }

    function clearAddressFields() {
        const fields = ['fullName', 'address', 'city', 'state', 'country', 'pincode', 'mobileNo', 'flatNo', 'district', 'landmark'];
        fields.forEach(field => document.getElementById(field).value = '');
    }

    function getAddressFromFields() {
        return {
            FullName: document.getElementById('fullName').value,
            Address: document.getElementById('address').value,
            City: document.getElementById('city').value,
            State: document.getElementById('state').value,
            Country: document.getElementById('country').value,
            Pincode: document.getElementById('pincode').value,
            MobileNo: document.getElementById('mobileNo').value,
            FlatNo: document.getElementById('flatNo').value,
            District: document.getElementById('district').value,
            Landmark: document.getElementById('landmark').value
        };
    }

    window.onload = function() {
        const addressSelect = document.getElementById('addressSelect');
        if (addressSelect.value) {
            fillAddressFields(addressSelect.options[addressSelect.selectedIndex].dataset);
        }

        // Payment method selection remains unchanged
        document.querySelectorAll('input[name="payment"]').forEach(paymentRadio => {
            paymentRadio.addEventListener('change', function () {
                document.getElementById('paymentMethod').value = this.value;
            });
        });

        const initialPaymentMethod = document.querySelector('input[name="payment"]:checked');
        if (initialPaymentMethod) {
            document.getElementById('paymentMethod').value = initialPaymentMethod.value;
        }
    };

    // Updated validation function
    function validateAddressSelection() {
        const fullName = document.getElementById('fullName').value;
        const address = document.getElementById('address').value;
        if (!fullName || !address) {
            document.getElementById('address-error-message').style.display = 'block';
            return false;
        }
        document.getElementById('address-error-message').style.display = 'none';
        return true;
    }

    // Update the checkout form submission to use the new address fields
    document.getElementById('checkout-form').onsubmit = async function (e) {
        e.preventDefault();

        if (!validateAddressSelection()) {
            return false;
        }

        const paymentMethod = document.getElementById('paymentMethod').value;
        if (!paymentMethod) {
            alert('Please select a payment method.');
            return false;
        }

        // Get address from fields
        const addressDetails = getAddressFromFields();

        // Update hidden inputs with new address details
        Object.keys(addressDetails).forEach(key => {
            document.querySelector(`input[name="Address[${key}]"]`).value = addressDetails[key];
        });

        if (paymentMethod === 'Online Payment') {
                try {
                    const orderDetails = {
                        paymentMethod: paymentMethod,
                        Products: [...document.querySelectorAll('input[name^="Products"][name$="[ProductId]"]')].map(input => {
                            const index = input.name.match(/\d+/)[0]; // Get the index from the input name
                            const productId = input.value; // Fetch product ID directly from this input
                            const quantity = document.querySelector(`input[name="Products[${index}][Quantity]"]`).value; // Fetch the corresponding quantity
                            
                            return {
                                ProductId: productId,
                                Quantity: quantity
                            };
                        }),
                        TotalPrice: document.querySelector('input[name="TotalPrice"]').value,
                        Address: {
                            FullName: document.querySelector('input[name="Address[FullName]"]').value,
                            Address: document.querySelector('input[name="Address[Address]"]').value,
                            MobileNo: document.querySelector('input[name="Address[MobileNo]"]').value,
                            Pincode: document.querySelector('input[name="Address[Pincode]"]').value,
                            FlatNo: document.querySelector('input[name="Address[FlatNo]"]').value,
                            Country: document.querySelector('input[name="Address[Country]"]').value,
                            City: document.querySelector('input[name="Address[City]"]').value,
                            District: document.querySelector('input[name="Address[District]"]').value,
                            Landmark: document.querySelector('input[name="Address[Landmark]"]').value,
                            State: document.querySelector('input[name="Address[State]"]').value,
                        }
                    };

                    // Send request to backend to create Razorpay order
                    const response = await fetch('/place-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(orderDetails)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        alert(`Error: ${errorData.message}`);
                        console.error('Server Error:', errorData);
                        return;
                    }

                    const data = await response.json();
                    console.log('Server Response:', data);

                    // Proceed if Razorpay order is created
                    if (data.razorpayOrderId) {
                        initiateRazorpayPayment(data); // Call your Razorpay payment function
                    } else {
                        alert('Failed to create order');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('There was an error processing your request. Please try again.');
                }
        } else {
            this.submit(); // Submit the form for other payment methods
        }
    };
    function initiateRazorpayPayment(data) {
            let paymentSuccess = false; // Flag to check payment status

            var options = {
                key: data.key, // Your Razorpay key
                amount: data.amount, // Amount in paise
                currency: data.currency,
                name: "MAZE BOOKS",
                description: "Test Transaction",
                order_id: data.razorpayOrderId, // Order ID created in backend
                handler: async function (response) {
                    paymentSuccess = true; // Payment was successful

                    // Send payment verification request to server
                    const verifyResponse = await fetch('/verify-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            razorpayPaymentId: response.razorpay_payment_id,
                            razorpayOrderId: data.razorpayOrderId,
                            razorpaySignature: response.razorpay_signature
                        })
                    });

                    const verificationData = await verifyResponse.json();
                    if (verificationData.success) {
                        // Redirect or show success message
                        paymentSuccess = true;
                        window.location.href = `/order-success?orderId=${verificationData.orderId}`;
                    } else {
                        alert('Payment verification failed');
                    }
                },
                prefill: {
                    name: "",
                    email: '',
                    contact: ""
                },
                theme: {
                    color: "#333"
                }
            };

            const razorpay = new Razorpay(options);

            // Open the Razorpay payment modal
            razorpay.open();

            // Check if the modal was closed without payment
            razorpay.on('payment.failed', function(response) {
                // Handle the payment failure case if needed
            });

            // Use a simple setTimeout to check if the payment was completed after a few seconds
            const checkPaymentStatus = setInterval(() => {
                if (paymentSuccess) {
                    clearInterval(checkPaymentStatus); // Clear interval if payment is successful
                } else if (!razorpay.isOpen) {
                    clearInterval(checkPaymentStatus); // Clear interval if modal is closed
                    // Show a sweet alert for order failure
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Failed',
                        text: 'Your order was not completed. Please try again.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        // Redirect to order history after alert is acknowledged
                        window.location.href = "/myaccount/order-history";
                    });
                }
            }, 1000); // Check every second
        }
</script>
</body>
</html>