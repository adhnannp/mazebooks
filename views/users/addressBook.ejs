<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <title>Document</title>
</head>
<body>
<style>
/* Custom Styles for Navbar */
.navbar {
    padding: 5px 0; /* Reduced padding to decrease height */
    font-size: 14px;
}

.navbar-brand {
    font-size: 1.5em;
    font-weight: bold;
}

.navbar-nav .nav-item .nav-link {
    font-size: 1em;
    margin-right: 15px;
}

.nav-link:hover {
    color: blue;
}

.search-bar {
    width: 250px;
    margin: 0 auto;
}

.search-bar input {
    width: 100%;
    padding: 5px 10px;
    border-radius: 20px;
    border: 1px solid #ddd;
}

.icon-link {
    font-size: 1em;
    color: #333;
    margin-left: 15px;
}

.icon-link:hover {
    color: blue;
}

.navbar-toggler {
    border: none;
    background: transparent;
}
</style>
<nav class="navbar navbar-expand-lg navbar-light bg-light fixed-top">
    <div class="container">
        <a class="navbar-brand" href="/">COZA STORE</a>

        <!-- Centered Search Bar -->
        <form class="search-bar">
            <input type="text" placeholder="Search for books...">
        </form>

        <!-- Navbar Toggle -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarResponsive"
            aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Navbar Links and Icons -->
        <div class="collapse navbar-collapse" id="navbarResponsive">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/shop">Shop</a>
                </li>
                <li class="nav-item"></li>
                    <a class="nav-link" href="#">Best Seller</a>
                </li>
                <li class="nav-item"></li>
                    <a class="nav-link" href="#">Today's Deal</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Contact</a>
                </li>

                <!-- Icons at the End -->
                <li class="nav-item d-flex align-items-center">
                    <a href="#" class="icon-link"><i class="fas fa-shopping-cart"></i></a>
                    <a href="#" class="icon-link"><i class="fas fa-heart"></i></a>
                    <a href="/myaccount" class="icon-link"><i class="fas fa-user"></i></a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<br><br><br>
<style>
    /* Existing styles */
    body {
        background-color: white;
        font-family: Arial, sans-serif;
    }
    .account-container {
        width: 80%;
        margin: 0 auto;
    }
    .account-breadcrumbs {
        margin: 20px 0;
        font-size: 14px;
    }
    .account-breadcrumbs a {
        color: #4F2F2D;
        text-decoration: none;
    }
    .account-breadcrumbs span {
        margin: 0 5px;
        color: #999;
    }
    .account-overview-container {
        display: flex;
        margin-top: 20px;
    }
    .account-sidebar {
        width: 25%;
        border-right: 1px solid #ddd;
        padding-right: 20px;
    }
    .account-sidebar a {
        display: block;
        padding: 10px 20px;
        color: #333;
        text-decoration: none;
        margin-bottom: 10px;
        border-radius: 5px;
        transition: background-color 0.3s, box-shadow 0.3s;
    }
    .account-sidebar a:hover {
        background-color: #f0f0f0;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }
    .account-sidebar a.account-selected {
        background-color: #e0e0e0;
        font-weight: bold;
    }
    /* Custom styles for the address cards */
    .card {
    border-radius: 8px;
    transition: box-shadow 0.3s ease;
}
.card:hover {
    box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
}
.card-title {
    font-size: 1rem;
    font-weight: bold;
}
.card-text {
    font-size: 0.85rem;
    line-height: 1.4;
}

.btn-outline-secondary {
    border-color: #4F2F2D;
    color: #4F2F2D;
}

.btn-outline-secondary:hover {
    background-color: #4F2F2D;
    color: white;
}
</style>
<div class="account-container">
    <!-- Breadcrumbs -->
    <div class="account-breadcrumbs">
        <a href="/">Home</a> <span>&gt;</span><a href="/myaccount">Account Overview</a><span>&gt;</span><span>Address Book</span>
    </div>

    <div class="account-overview-container">
        <!-- Sidebar -->
        <div class="account-sidebar">
            <a href="/account">Account Overview</a>
            <a href="/change-password">Change Password</a>
            <a href="/order-history">Order History</a>
            <a href="/address-book" class="account-selected">Address Book</a>
        </div>

        <!-- Main Content -->
        <div class="account-main-content " style="margin-left:20px">
            <!-- Add Address Button -->
            <div class=" ml-4 align-items-center mb-4">
                <a href="#" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                    <i class="fas fa-plus"></i> Add New Address
                </a>
            </div>
            <!-- Address Cards -->
            <div class="row">
                <!-- Loop through the addresses and render each in a card -->
                <% addresses.forEach(address => { %>
                <div class="col-md-12 mb-3">
                    <div class="card shadow-sm" style="max-width: 100%; border-radius: 8px;">
                        <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #f8f9fa;">
                            <h6 class="card-title mb-0" style="font-weight: bold; font-size: 1rem;">Address</h6>
                            <a href="#" class="btn btn-outline-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deleteModal" data-address-id="<%= address._id %>">
                                <i class="fas fa-trash-alt"></i> Delete
                            </a>
                        </div>
                        <div class="card-body p-3">
                            <p class="card-text mb-2" style="font-size: 0.85rem;">
                                <strong><%= address.FullName %></strong><br>
                                <%= address.Address %> ,<%=  address.FlatNo ? address.FlatNo : '' %><br>
                                <%= address.Landmark ? address.Landmark + ', ' : '' %> <%= address.City %>, <%= address.District %>, <%= address.State %> - <%= address.Pincode %><br>
                                <strong>Phone:</strong> <%= address.MobileNo %> <br>
                                <strong>Address Type:</strong> <%= address.AddressType %>
                            </p>
                            <a href="#" class="btn btn-outline-secondary btn-sm btn-edit-address" data-id="<%= address._id %>"
                                data-fullname="<%= address.FullName %>"
                                data-mobile="<%= address.MobileNo %>"
                                data-address="<%= address.Address %>"
                                data-landmark="<%= address.Landmark %>"
                                data-pincode="<%= address.Pincode %>"
                                data-flatno="<%= address.FlatNo %>"
                                data-addresstype="<%= address.AddressType %>"
                                data-district="<%= address.District %>"
                                data-state="<%= address.State %>"
                                data-country="<%= address.Country %>"
                                data-city="<%= address.City %>">
                                 <i class="fas fa-edit"></i> Edit Address
                             </a>
                        </div>
                    </div>
                </div>
                <% }); %>
            </div>
        </div>
    </div>
</div>
<!-- Add Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form action="/myaccount/add-address" method="post" id="addAddressForm">
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="fullName" class="form-label">Full Name</label>
                            <input type="text" class="form-control" id="fullName" name="FullName" required>
                            <p class="text-danger" id="fullNameError"></p>
                        </div>
                        <input type="text" style="display: none;" value="<%= userId %>" hidden id="userId" name="UserId">
                        <div class="col-md-6">
                            <label for="mobileNo" class="form-label">Mobile Number</label>
                            <input type="text" class="form-control" id="mobileNo" name="MobileNo" required>
                            <p class="text-danger" id="mobileNoError"></p>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="address" class="form-label">Address</label>
                        <input type="text" class="form-control" id="address" name="Address" required>
                        <p class="text-danger" id="addressError"></p>
                    </div>
                    <div class="mb-3">
                        <label for="landmark" class="form-label">Landmark (Optional)</label>
                        <input type="text" class="form-control" id="landmark" name="Landmark">
                        <p class="text-danger" id="landmarkError"></p>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="pincode" class="form-label">Pincode</label>
                            <input type="text" class="form-control" id="pincode" name="Pincode" required>
                            <p class="text-danger" id="pincodeError"></p>
                        </div>
                        <div class="col-md-4">
                            <label for="flatNo" class="form-label">Flat No (Optional)</label>
                            <input type="text" class="form-control" id="flatNo" name="FlatNo">
                            <p class="text-danger" id="flatNoError"></p>
                        </div>
                        <div class="col-md-4">
                            <label for="addressType" class="form-label">Address Type</label>
                            <select id="addressType" name="AddressType" class="form-select" required>
                                <option value="">Select Address Type</option>
                                <option value="Home">Home</option>
                                <option value="Office">Office</option>
                                <option value="Other">Other</option>
                            </select>
                            <p class="text-danger" id="addressTypeError"></p>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="district" class="form-label">District</label>
                            <input type="text" class="form-control" id="district" name="District" required>
                            <p class="text-danger" id="districtError"></p>
                        </div>
                        <div class="col-md-4">
                            <label for="state" class="form-label">State</label>
                            <input type="text" class="form-control" id="state" name="State" required>
                            <p class="text-danger" id="stateError"></p>
                        </div>
                        <div class="col-md-4">
                            <label for="country" class="form-label">Country</label>
                            <input type="text" class="form-control" id="country" name="Country" required>
                            <p class="text-danger" id="countryError"></p>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="city" class="form-label">City</label>
                        <input type="text" class="form-control" id="city" name="City" required>
                        <p class="text-danger" id="cityError"></p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Address</button>
                </div>
                <p id="backendMessage" class="text-danger"></p>
            </form>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this address?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDelete" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form action="/myaccount/edit-address/" method="post" id="editAddressForm">
                <div class="modal-body">
                    <!-- Hidden field for address ID -->
                    <input type="hidden" id="editAddressId" name="AddressId">

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="editFullName" class="form-label">Full Name</label>
                            <input type="text" class="form-control" id="editFullName" name="FullName" required>
                            <p class="text-danger" id="editFullNameError"></p>
                        </div>
                        <div class="col-md-6">
                            <label for="editMobileNo" class="form-label">Mobile Number</label>
                            <input type="text" class="form-control" id="editMobileNo" name="MobileNo" required>
                            <p class="text-danger" id="editMobileNoError"></p>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="editAddress" class="form-label">Address</label>
                        <input type="text" class="form-control" id="editAddress" name="Address" required>
                        <p class="text-danger" id="editAddressError"></p>
                    </div>
                    <div class="mb-3">
                        <label for="editLandmark" class="form-label">Landmark (Optional)</label>
                        <input type="text" class="form-control" id="editLandmark" name="Landmark">
                        <p class="text-danger" id="editLandmarkError"></p>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="editPincode" class="form-label">Pincode</label>
                            <input type="text" class="form-control" id="editPincode" name="Pincode" required>
                            <p class="text-danger" id="editPincodeError"></p>
                        </div>
                        <div class="col-md-4">
                            <label for="editFlatNo" class="form-label">Flat No (Optional)</label>
                            <input type="text" class="form-control" id="editFlatNo" name="FlatNo">
                            <p class="text-danger" id="editFlatNoError"></p>
                        </div>
                        <div class="col-md-4">
                            <label for="editAddressType" class="form-label">Address Type</label>
                            <select id="editAddressType" name="AddressType" class="form-select" required>
                                <option value="">Select Address Type</option>
                                <option value="Home">Home</option>
                                <option value="Office">Office</option>
                                <option value="Other">Other</option>
                            </select>
                            <p class="text-danger" id="editAddressTypeError"></p>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="editDistrict" class="form-label">District</label>
                            <input type="text" class="form-control" id="editDistrict" name="District" required>
                            <p class="text-danger" id="editDistrictError"></p>
                        </div>
                        <div class="col-md-4">
                            <label for="editState" class="form-label">State</label>
                            <input type="text" class="form-control" id="editState" name="State" required>
                            <p class="text-danger" id="editStateError"></p>
                        </div>
                        <div class="col-md-4">
                            <label for="editCountry" class="form-label">Country</label>
                            <input type="text" class="form-control" id="editCountry" name="Country" required>
                            <p class="text-danger" id="editCountryError"></p>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="editCity" class="form-label">City</label>
                        <input type="text" class="form-control" id="editCity" name="City" required>
                        <p class="text-danger" id="editCityError"></p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
                <p id="editBackendMessage" class="text-danger"></p>
            </form>
            <p id="editBackendMessage" class="text-danger"></p>
        </div>
    </div>
</div>
<!-- Bootstrap JS and dependencies -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.7/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // Regular expressions for validation
    const regexPatterns = {
        fullName: /^[A-Za-z]{1,}[A-Za-z\s]{0,}$/,
        mobileNo: /^(?!([0-9])\1{9})[6-9][0-9]{9}$/,
        address: /^[A-Za-z0-9\s,.-]{5,}$/,
        landmark: /^[A-Za-z0-9\s,.-]{3,}$/,
        pincode: /^[0-9]{6}$/,
        flatNo: /^[A-Za-z0-9\s-]{1,}$/,
        district: /^[A-Za-z\s]{2,}$/,
        state: /^[A-Za-z\s]{2,}$/,
        country: /^[A-Za-z\s]{2,}$/,
        city: /^[A-Za-z\s]{2,}$/
    };

    // Function to validate a field
    function validateField(id, pattern, errorId) {
        const field = document.getElementById(id);
        if (!field) {
            console.warn(`Field with ID "${id}" not found.`);
            return true;  // Skip validation if field is not found
        }

        const error = document.getElementById(errorId);
        if (field.value.trim() === '' && !field.required) {
            error.textContent = '';
            return true;
        }

        if (!pattern || !pattern.test(field.value.trim())) {
            error.textContent = `Invalid ${id}.`;
            return false;
        }

        error.textContent = '';
        return true;
    }

    // Validate all fields on input
    function setupValidation() {
        const fields = [
            { id: 'fullName', pattern: regexPatterns.fullName, errorId: 'fullNameError' },
            { id: 'mobileNo', pattern: regexPatterns.mobileNo, errorId: 'mobileNoError' },
            { id: 'address', pattern: regexPatterns.address, errorId: 'addressError' },
            { id: 'landmark', pattern: regexPatterns.landmark, errorId: 'landmarkError' },
            { id: 'pincode', pattern: regexPatterns.pincode, errorId: 'pincodeError' },
            { id: 'flatNo', pattern: regexPatterns.flatNo, errorId: 'flatNoError' },
            { id: 'district', pattern: regexPatterns.district, errorId: 'districtError' },
            { id: 'state', pattern: regexPatterns.state, errorId: 'stateError' },
            { id: 'country', pattern: regexPatterns.country, errorId: 'countryError' },
            { id: 'city', pattern: regexPatterns.city, errorId: 'cityError' },
        ];

        fields.forEach(field => {
            const inputElement = document.getElementById(field.id);
            if (inputElement) {
                inputElement.addEventListener('input', () => validateField(field.id, field.pattern, field.errorId));
            }
        });
    }

    setupValidation();

    // AJAX form submission
    document.getElementById('addAddressForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const inputs = [...document.querySelectorAll('input, select')];
        const isValid = inputs.every(input => {
            const pattern = regexPatterns[input.id];
            if (pattern) {
                return validateField(input.id, pattern, `${input.id}Error`);
            }
            return true; // Skip if pattern not found (i.e., no validation needed)
        });

        // Checking if the Address Type is selected
        const addressType = document.getElementById('addressType');
        if (addressType.value === '') {
            document.getElementById('addressTypeError').textContent = 'Please select an address type.';
            return;
        } else {
            document.getElementById('addressTypeError').textContent = '';
        }

        if (!isValid) {
            document.getElementById('backendMessage').textContent = 'Please correct the errors before submitting.';
            return;
        }

        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/myaccount/add-address', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });

            const result = await response.json();

            if (response.ok) {
                document.getElementById('backendMessage').textContent = 'Address added successfully.';
                document.getElementById('backendMessage').style.color = 'green';
                setTimeout(() => {
                    window.location.href = '/myaccount/address-book';
                }, 1000); // Redirect after 2 seconds to allow user to see success message
            } else {
                document.getElementById('backendMessage').textContent = result.message || 'Failed to add address.';
            }
        } catch (error) {
            console.error('Error:', error);
            document.getElementById('backendMessage').textContent = 'An error occurred. Please try again later.';
        }
    });
});
document.getElementById('pincode').addEventListener('input', async (e) => {
        const pincode = e.target.value;
        if (pincode.length === 6) {
    try {
        const response = await fetch(`https://api.postalpincode.in/pincode/${pincode}`);
        const data = await response.json();

        if (data[0].Status === 'Success') {
            const postOffice = data[0].PostOffice[0];
            const State = postOffice.State || '';
            const District = postOffice.District || '';
            const Country = postOffice.Country || '';
            const Block = postOffice.Block || ''; // Check if Block exists

            console.log(postOffice);

            document.getElementById('state').value = State;
            document.getElementById('district').value = District;
            document.getElementById('country').value = Country;
            document.getElementById('city').value = Block; // Use Block if available, else empty string
        } else {
            document.getElementById('state').value = '';
            document.getElementById('district').value = '';
            document.getElementById('country').value = '';
            document.getElementById('city').value = '';
        }
    } catch (error) {
        console.error('Error fetching pincode details:', error);
    }
}
});

document.addEventListener('DOMContentLoaded', (event) => {
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
    let addressIdToDelete;

    document.querySelectorAll('[data-bs-toggle="modal"]').forEach(button => {
        button.addEventListener('click', (event) => {
            addressIdToDelete = event.currentTarget.getAttribute('data-address-id');
        });
    });

    document.getElementById('confirmDelete').addEventListener('click', async () => {
        if (addressIdToDelete) {
            try {
                const response = await fetch(`/myaccount/delete-address/${addressIdToDelete}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (response.ok) {
                    // Reload the page or update the UI to reflect the deletion
                    window.location.reload();
                } else {
                    console.error('Failed to delete address');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }
        deleteModal.hide();
    });
});

document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.btn-edit-address').forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                
                // Retrieve data attributes from the button
                const addressId = button.getAttribute('data-id');
                document.getElementById('editAddressId').value = addressId;
                document.getElementById('editFullName').value = button.getAttribute('data-fullname');
                document.getElementById('editMobileNo').value = button.getAttribute('data-mobile');
                document.getElementById('editAddress').value = button.getAttribute('data-address');
                document.getElementById('editLandmark').value = button.getAttribute('data-landmark') || '';
                document.getElementById('editPincode').value = button.getAttribute('data-pincode');
                document.getElementById('editFlatNo').value = button.getAttribute('data-flatno') || '';
                document.getElementById('editAddressType').value = button.getAttribute('data-addresstype');
                document.getElementById('editDistrict').value = button.getAttribute('data-district');
                document.getElementById('editState').value = button.getAttribute('data-state');
                document.getElementById('editCountry').value = button.getAttribute('data-country');
                document.getElementById('editCity').value = button.getAttribute('data-city');

                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById('editAddressModal'));
                modal.show();
            });
        });
    });
document.getElementById('editPincode').addEventListener('input', async (e) => {
        const pincode = e.target.value;
        if (pincode.length === 6) {
    try {
        const response = await fetch(`https://api.postalpincode.in/pincode/${pincode}`);
        const data = await response.json();

        if (data[0].Status === 'Success') {
            const postOffice = data[0].PostOffice[0];
            const State = postOffice.State || '';
            const District = postOffice.District || '';
            const Country = postOffice.Country || '';
            const Block = postOffice.Block || ''; // Check if Block exists

            console.log(postOffice);

            document.getElementById('editState').value = State;
            document.getElementById('editDistrict').value = District;
            document.getElementById('editCountry').value = Country;
            document.getElementById('editCity').value = Block; // Use Block if available, else empty string
        } else {
            document.getElementById('editState').value = '';
            document.getElementById('editDistrict').value = '';
            document.getElementById('editCountry').value = '';
            document.getElementById('editCity').value = '';
        }
    } catch (error) {
        console.error('Error fetching pincode details:', error);
    }
}
});

document.addEventListener('DOMContentLoaded', () => {
    // Define regex patterns for validation
    const regexPatterns = {
        fullName: /^[A-Za-z]{1,}[A-Za-z\s]{0,}$/,
        mobileNo: /^(?!([0-9])\1{9})[6-9][0-9]{9}$/,
        address: /^[A-Za-z0-9\s,.-]{5,}$/,
        landmark: /^[A-Za-z0-9\s,.-]{3,}$/,
        pincode: /^[0-9]{6}$/,
        flatNo: /^[A-Za-z0-9\s-]{1,}$/,
        district: /^[A-Za-z\s]{2,}$/,
        state: /^[A-Za-z\s]{2,}$/,
        country: /^[A-Za-z\s]{2,}$/,
        city: /^[A-Za-z\s]{2,}$/
    };

    // Validate fields function
    function validateField(id, pattern, errorId) {
        const field = document.getElementById(id);
        if (!field) {
            console.warn(`Field with ID "${id}" not found.`);
            return true;  // Skip validation if field is not found
        }

        const error = document.getElementById(errorId);
        if (field.value.trim() === '' && !field.required) {
            error.textContent = '';
            return true;
        }

        if (!pattern || !pattern.test(field.value.trim())) {
            error.textContent = `Invalid ${id}.`;
            return false;
        }

        error.textContent = '';
        return true;
    }

    // Set up validation for the form fields
    function setupValidation() {
        let isValid = true;

        const fields = [
            { id: 'editFullName', pattern: regexPatterns.fullName, errorId: 'editFullNameError' },
            { id: 'editMobileNo', pattern: regexPatterns.mobileNo, errorId: 'editMobileNoError' },
            { id: 'editAddress', pattern: regexPatterns.address, errorId: 'editAddressError' },
            { id: 'editLandmark', pattern: regexPatterns.landmark, errorId: 'editLandmarkError' },
            { id: 'editPincode', pattern: regexPatterns.pincode, errorId: 'editPincodeError' },
            { id: 'editFlatNo', pattern: regexPatterns.flatNo, errorId: 'editFlatNoError' },
            { id: 'editDistrict', pattern: regexPatterns.district, errorId: 'editDistrictError' },
            { id: 'editState', pattern: regexPatterns.state, errorId: 'editStateError' },
            { id: 'editCountry', pattern: regexPatterns.country, errorId: 'editCountryError' },
            { id: 'editCity', pattern: regexPatterns.city, errorId: 'editCityError' }
        ];

        fields.forEach(field => {
            const isFieldValid = validateField(field.id, field.pattern, field.errorId);
            isValid = isValid && isFieldValid;
        });

        return isValid;
    }

    setupValidation();

    // Form submission handler
    document.getElementById('editAddressForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const form = e.target;
        const isValid = setupValidation();

        // Clear previous error messages
        document.getElementById('editBackendMessage').textContent = '';

        if (isValid) {
            try {
                // Create a FormData object from the form
                const formData = new FormData(form);

                // Send an AJAX request to the server
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                });

                // Parse the JSON response from the server
                const result = await response.json();

                if (response.ok) {
                    // On success, redirect to the address book page
                    window.location.href = '/myaccount/address-book';
                } else {
                    // Display server-side error messages
                    document.getElementById('editBackendMessage').textContent = result.message || 'An error occurred. Please try again.';
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('editBackendMessage').textContent = 'An unexpected error occurred. Please try again.';
            }
        } else {
            document.getElementById('editBackendMessage').textContent = 'Please correct the errors in the form.';
        }
    });
});

</script>
</body>
</html>