<%- include('../userLayouts/header') %>
<style>
    /* Existing styles */
    body {
        background-color: white;
        font-family: Arial, sans-serif;
    }
    .account-container {
        width: 80%;
        margin: 0 auto;
    }
    .account-breadcrumbs {
        margin: 20px 0;
        font-size: 14px;
    }
    .account-breadcrumbs a {
        color: #4F2F2D;
        text-decoration: none;
    }
    .account-breadcrumbs span {
        margin: 0 5px;
        color: #999;
    }
    .account-overview-container {
        display: flex;
        margin-top: 20px;
    }
    .account-sidebar {
        width: 25%;
        border-right: 1px solid #ddd;
        padding-right: 20px;
    }
    .account-sidebar a {
        display: block;
        padding: 10px 20px;
        color: #333;
        text-decoration: none;
        margin-bottom: 10px;
        border-radius: 5px;
        transition: background-color 0.3s, box-shadow 0.3s;
    }
    .account-sidebar a:hover {
        background-color: #f0f0f0;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }
    .account-sidebar a.account-selected {
        background-color: #e0e0e0;
        font-weight: bold;
    }
    /* Custom styles for the address cards */
    .card {
        border-radius: 8px;
        transition: box-shadow 0.3s ease;
    }
    .card:hover {
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
    }
    .card-title {
        font-size: 1rem;
        font-weight: bold;
    }
    .card-text {
        font-size: 0.85rem;
        line-height: 1.4;
    }
    .btn-outline-secondary {
        border-color: #4F2F2D;
        color: #4F2F2D;
    }
    .btn-outline-secondary:hover {
        background-color: #4F2F2D;
        color: white;
    }
    .empty-order-message {
        text-align: center;
        margin-top: 20px; /* Space below the tabs */
    }
    .empty-order-message h2 {
        font-size: 24px;
        margin-bottom: 10px;
    }
    .empty-order-message p {
        font-size: 16px;
        color: #555;
    }
    .continue-shopping-btn {
        display: inline-block;
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        text-decoration: none;
        border-radius: 5px;
    }
    .continue-shopping-btn:hover {
        background-color: #0056b3;
    }
    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 4px;
    }
    .alert-danger {
        color: #a94442;
        background-color: #f2dede;
        border-color: #ebccd1;
    }
    .pagination {
        text-align: center;
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }
    .pagination .page-item .page-link {
        color: #fff;
        background-color: #6c757d;
        border-color: #6c757d;
    }
    .pagination .page-item.active .page-link {
        background-color: #5a6268;
        border-color: #5a6268;
    }
    .pagination .page-item.disabled .page-link {
        color: #adb5bd;
    }
    .selected-7{
        color: blue;
    }
    .order-history{
        margin-left: 20px;
    }
    .account-main-content{
        width: 75%;
    }
    .order-category-tabs {
        display: flex;
        justify-content: space-around;
        margin-bottom: 20px;
        padding: 10px 0; /* Add padding to ensure spacing */
        border-bottom: 1px solid #e0e0e0; /* Optional: Add a border for separation */
    }
    .order-category-tabs a {
        text-decoration: none;
        padding: 10px 20px;
        font-weight: bold;
        color: #333;
        border-bottom: 3px solid transparent;
        transition: border-bottom 0.3s;
    }
    .order-category-tabs a.active {
        border-bottom: 3px solid#4F2F2D; /* Underline color for active tab */
        color:#4F2F2D; /* Active text color */
    }
    .order-category-tabs a:hover {
        border-bottom: 3px solid #4F2F2D;
        color: #4F2F2D;
    }
</style>

<div class="account-container">
    <!-- Breadcrumbs -->
    <div class="account-breadcrumbs">
        <a href="/">Home</a> <span>&gt;</span><a href="/myaccount">My Account</a><span>&gt;</span><span>Order History</span>
    </div>

    <div class="account-overview-container">
        <!-- Sidebar -->
        <div class="account-sidebar">
            <a href="/myaccount">Account Overview</a>
            <a href="/myaccount/edit-password">Change Password</a>
            <a href="/myaccount/order-history" class="account-selected">Order History</a>
            <a href="/myaccount/address-book">Address Book</a>
            <a href="/myaccount/wallet">My Wallet</a>
        </div>

        <!-- Main Content -->
        <div class="account-main-content">
            <div class="order-history">
                <h3>Order History</h3>
                <!-- Display error message if it exists -->
                <div class="order-category-tabs">
                    <a href="/myaccount/order-history">Live Orders</a>
                    <a href="/myaccount/cancelled-orders">Cancelled Orders</a>
                    <a href="/myaccount/returned-orders">Returned Orders</a>
                    <a href="/myaccount/delivered-orders" class="active">Delivered Orders</a>
                </div>
                <!-- Horizontal Section for different order statuses -->
                <% if (orders.length === 0) { %>
                    <!-- Display if no orders -->
                    <div class="empty-order-message">
                        <h2>No Orders Found</h2>
                        <p>Looks like you haven't placed any orders yet!</p>
                        <a href="/shop" class="continue-shopping-btn">Continue Shopping</a>
                    </div>
                <% } else { %>
                    <div class="order-cards">
                        <% orders.forEach(order => { %>
                            <div class="order-card">
                                <div class="order-header">
                                    <div class="status-cell">
                                        <% if (order.Status === 'Pending') { %>
                                            <span class="status-indicator pending">&#9673; <%= order.Status %></span>
                                        <% } else if (order.Status === 'Shipped') { %>
                                            <span class="status-indicator shipped">&#9673; <%= order.Status %></span>
                                        <% } else if (order.Status === 'Delivered') { %>
                                            <span class="status-indicator delivered">&#9673; Out For Delivery</span>
                                        <% } else if (order.Status === 'Placed') { %>
                                            <span class="status-indicator placed">&#9673; Delivered</span>
                                        <% } else if (order.Status === 'Cancelled' || order.Status === 'Returned') { %>
                                            <span class="status-indicator cancelled">&#9673; <%= order.Status %></span>
                                        <% } %>
                                    </div>
                                    <div class="date-cell">
                                        <p>Ordered Date: <%= new Date(order.createdAt).toLocaleDateString('en-GB') %></p>
                                    </div>
                                </div>
                                <div class="order-details">
                                    <% order.Products.forEach(item => { %>
                                        <% if (item.ProductStatus === 'Cancelled' || order.Status === 'Cancelled' || item.ProductStatus === 'Returned' || order.Status === 'Returned' ) { %>
                                        <% }else{ %>
                                        <div class="order-item">
                                            <img src="/static/uploads/<%= item.ProductId.Images[0] %>" alt="<%= item.ProductId.Name %>" class="product-image">
                                            <div class="item-info">
                                                <p class="item-name"><%= item.ProductId.Name %></p>
                                                <p class="item-quantity">Quantity: <%= item.Quantity %></p>
                                            </div>
                                            <div class="return-action">
                                                <% 
                                                    const placedAt = order.PlacedAt ? new Date(order.PlacedAt) : new Date(order.createdAt);
                                                    const currentDate = new Date();
                                                    const timeDifference = Math.floor((currentDate - placedAt) / (1000 * 60 * 60 * 24));
                                                %>
                                                <% if (item.ProductStatus && item.ProductStatus === 'Return Requested') { %>
                                                    <button type="button" class="btn btn-secondary btn-sm" disabled>Return Requested</button>
                                                <% } else if (item.ProductStatus && item.ProductStatus === 'Returned') { %>
                                                    <button type="button" class="btn btn-secondary btn-sm" disabled>Returned</button>
                                                <% } else if (item.ProductStatus && item.ProductStatus === 'Return Rejected') { %>
                                                    <button type="button" class="btn btn-warning btn-sm" disabled>Return Request Rejected</button>
                                                <% } else if (timeDifference <= 7 && item.ProductStatus=== "Placed") { %>
                                                    <button type="button" class="btn btn-warning btn-sm" onclick="openReturnModal('<%= order._id %>', '<%= item.ProductId._id %>', '<%= item.ProductId.Name %>')">Return This Product</button>
                                                <% }%>
                                            </div>
                                        </div>
                                        <%}%>
                                    <% }) %>
                                    <div class="total-cell">
                                        <p>Total: ₹ <%= order.TotalPrice.toFixed(2) %></p>
                                    </div>
                                    <% if (order.AppliedCoupon) { %>
                                        <div class="coupon-info">
                                            <p>Coupon Code: <%= order.AppliedCoupon%></p>
                                            <p>Discount: <%= order.DiscountPercentage %> %</p>
                                        </div>
                                    <% } %>
                                </div>
                                <% if (order.Status === 'Placed') { %>
                                    <div class="invoice-download">
                                        <a href="/myaccount/download-invoice/<%= order._id %>">Download Invoice</a>
                                    </div>
                                <% } %>
                            </div>
                        <% }) %>
                    </div>
                    
                    <style>
                        .order-category-tabs {
                            display: flex;
                            justify-content: space-around;
                            margin-bottom: 20px;
                            padding: 10px 0; /* Add padding to ensure spacing */
                            border-bottom: 1px solid #e0e0e0; /* Optional: Add a border for separation */
                        }
                        .order-category-tabs a {
                            text-decoration: none;
                            padding: 10px 20px;
                            font-weight: bold;
                            color: #333;
                            border-bottom: 3px solid transparent;
                            transition: border-bottom 0.3s;
                        }

                        .order-category-tabs a.active {
                            border-bottom: 3px solid#4F2F2D; /* Underline color for active tab */
                            color:#4F2F2D; /* Active text color */
                        }

                        .order-category-tabs a:hover {
                            border-bottom: 3px solid #4F2F2D;
                            color: #4F2F2D;
                        }
                        .order-header {
                            background-color: #f5f5f5; /* Change this color to whatever you prefer */
                            padding: 10px;
                            border-radius: 4px;
                        }

                        .status-indicator {
                            padding: 3px 6px;
                            border-radius: 4px;
                            color: #fff; /* Text color for the indicators */
                        }

                        .pending {
                            color: #ffc107; /* Yellow */
                        }

                        .shipped {
                            color: #007bff; /* Blue */
                        }

                        .delivered {
                            color: #6c757d; /* Green */
                        }

                        .placed {
                            color: #28a745; /* Grey */
                        }

                        .cancelled {
                            color: #dc3545; /* Red */
                        }

                        .returned {
                            color: #dc3545; /* Red for Returned as well */
                        }

                        .order-cards {
                            display: flex;
                            flex-direction: column; /* Change to column to stack orders vertically */
                            width: 100%;
                            margin: 0 auto;
                        }
                    
                        .order-card {
                            background-color: #fff;
                            border: 1px solid #e0e0e0;
                            border-radius: 4px;
                            margin-bottom: 20px;
                            padding: 15px;
                            width: 100%; /* Full width for each order card */
                            box-sizing: border-box;
                        }
                    
                        .order-header {
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                        }
                    
                        .order-details {
                            margin-top: 10px;
                        }
                    
                        .order-item {
                            display: flex;
                            align-items: center;
                            margin-bottom: 10px;
                        }
                    
                        .product-image {
                            width: 50px;
                            height: 50px;
                            object-fit: cover;
                            margin-right: 10px;
                            border-radius: 4px;
                        }
                        .item-info {
                            flex-grow: 1;
                        }
                    
                        .item-name {
                            font-weight: bold;
                        }
                    
                        .item-quantity {
                            color: #666;
                        }
                    
                        .total-cell {
                            margin-top: 10px;
                            font-weight: bold;
                        }
                    
                        .payment-action {
                            display: flex;
                            justify-content: space-between;
                            margin-top: 10px;
                        }
                    
                        .btn {
                            display: inline-block;
                            padding: 6px 12px;
                            font-size: 14px;
                            font-weight: 400;
                            line-height: 1.42857143;
                            text-align: center;
                            white-space: nowrap;
                            vertical-align: middle;
                            cursor: pointer;
                            border: 1px solid transparent;
                            border-radius: 4px;
                        }
                    
                        .btn-sm {
                            padding: 5px 10px;
                            font-size: 12px;
                            line-height: 1.5;
                            border-radius: 3px;
                        }
                    
                        .btn-primary { background-color: #007bff; color: #fff; }
                        .btn-danger { background-color: #dc3545; color: #fff; }
                        .btn-warning { background-color: #ffc107; color: #000; }
                        .btn-secondary { background-color: #6c757d; color: #fff; }
                    
                        .return-action {
                            margin-top: 10px;
                            text-align: right;
                        }
                    </style>
                    
                    
                    <!-- Pagination -->
                    <div class="pagination">
                        <% if (totalPages > 1) { %>
                        <nav aria-label="Page navigation example">
                            <ul class="pagination justify-content-center">
                                <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                                    <a class="page-link" href="?page=<%= currentPage - 1 %>" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                <% for (let i = 1; i <= totalPages; i++) { %>
                                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                    <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                                </li>
                                <% } %>
                                <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                    <a class="page-link" href="?page=<%= currentPage + 1 %>" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                        <% } %>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div id="confirmCancelModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Cancellation</h5>
                <button type="button" class="close btn-secondary" style="border: none;" aria-label="Close" onclick="closeConfirmModal()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to cancel this order?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeConfirmModal()">No</button>
                <button type="button" class="btn btn-danger" id="confirmCancelButton">Cancel Order</button>
            </div>
        </div>
    </div>
</div>

<br>
<%- include('../userLayouts/footer') %>

<!-- Bootstrap JS and dependencies -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.7/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    document.querySelectorAll('.retry-payment').forEach(button => {
        button.addEventListener('click', async function() {
            const orderId = this.dataset.orderId;
        
            // Fetch Razorpay order details from the server and initiate payment
            const response = await fetch(`/myaccount/retry-payment/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
        
            const data = await response.json();
            if (data.success) {
                initiateRazorpayPayment(data); // Reuse the existing initiateRazorpayPayment function
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to retry payment. Please try again later.',
                });
            }
        });
    });
    function initiateRazorpayPayment(data) {
        let paymentSuccess = false; // Flag to check payment status
        var options = {
            key: data.key, // Your Razorpay key
            amount: data.amount, // Amount in paise
            currency: data.currency,
            name: "MAZE BOOKS",
            description: "Test Transaction",
            order_id: data.razorpayOrderId, // Order ID created in backend
            handler: async function (response) {
                paymentSuccess = true; // Payment was successful
                // Send payment verification request to server
                const verifyResponse = await fetch('/verify-payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        razorpayPaymentId: response.razorpay_payment_id,
                        razorpayOrderId: data.razorpayOrderId,
                        razorpaySignature: response.razorpay_signature
                    })
                });
                paymentSuccess = true;
                const verificationData = await verifyResponse.json();
                if (verificationData.success) {
                    // Redirect or show success message
                    paymentSuccess = true;
                    window.location.href = `/order-success?orderId=${verificationData.orderId}`;
                } else {
                    Swal.fire({
                        title: 'Payment Verification Failed',
                        text: 'There was an issue verifying your payment. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'Okay'
                    });
                }
            },
            prefill: {
                name: "",
                email: '',
                contact: ""
            },
            theme: {
                color: "#333"
            }
        };
        const razorpay = new Razorpay(options);
        // Open the Razorpay payment modal
        razorpay.open();
        // Check if the modal was closed without payment
        razorpay.on('payment.failed', function(response) {
            // Handle the payment failure case if needed
        });
        // Use a simple setTimeout to check if the payment was completed after a few seconds
        const checkPaymentStatus = setInterval(() => {
            if (paymentSuccess) {
                clearInterval(checkPaymentStatus); // Clear interval if payment is successful
            } else if (!razorpay.isOpen) {
                clearInterval(checkPaymentStatus); // Clear interval if modal is closed
                // Show a sweet alert for order failure
                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: 'Your order was not completed. Please try again.',
                    confirmButtonText: 'OK'
                }).then(() => {
                    // Redirect to order history after alert is acknowledged
                    window.location.href = "/myaccount/order-history";
                });
            }
        }, 1000); // Check every second
    }
</script>
<script>
function showAlert() {
    const urlParams = new URLSearchParams(window.location.search);
    const errorMessage = urlParams.get('error');
    const successMessage = urlParams.get('success');
    
    if (errorMessage) {
        Swal.fire({
            title: "Error!",
            text: errorMessage,
            icon: "error",
            showConfirmButton: false, // Hide the confirm button
            timer: 3000, // Auto-close after 3 seconds
        }).then(() => {
            // Clear the URL parameters if there is an error
            history.replaceState(null, null, window.location.pathname);
        });
    }

    if (successMessage) {
        Swal.fire({
            title: "Success!",
            text: successMessage,
            icon: "success",
            showConfirmButton: false, // Hide the confirm button
            timer: 3000, // Auto-close after 3 seconds
        }).then(() => {
            // Redirect to another page if the message indicates success
            window.location.href = '/myaccount/delivered-orders'; // Change to your desired redirect URL
        });
    }
}

// Call the function to show the alert
showAlert();
// Function to open SweetAlert for Canceling Products or Full Order
function openCancelProductModal(orderId, products) {
    // Filter products with ProductStatus as "Placed"
    const placedProducts = products.filter(product => product.ProductStatus === 'Placed');

    // If there is only one product, show a simple confirmation modal
    if (placedProducts.length === 1) {
        const singleProduct = placedProducts[0];

        // Show a simple confirmation modal for a single product
        Swal.fire({
            title: 'Cancel Product',
            text: `Are you sure you want to cancel: ${singleProduct.ProductId.Name}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, cancel it',
            cancelButtonText: 'No, keep it',
            customClass: {
                confirmButton: 'btn btn-danger',
                cancelButton: 'btn btn-secondary'
            },
            buttonsStyling: false
        }).then((result) => {
            if (result.isConfirmed) {
                // Create a form to submit the cancellation of the single product
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = `/myaccount/cancel-order/${orderId}`;

                // Add hidden input for the product ID to cancel
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'selectedProducts[]';
                input.value = singleProduct.ProductId._id; // Use ProductId._id for value
                form.appendChild(input);

                // Log the data being sent to the console
                console.log('Submitting cancellation for single product:', { selectedProducts: [singleProduct.ProductId._id] });

                document.body.appendChild(form);
                form.submit();
            }
        });
    } else if (placedProducts.length > 1) {
        // Dynamically generate checkboxes for the placed products
        let productSelectionHtml = placedProducts.map(product => {
            return `
                <div class="form-check" style="text-align: left; margin-bottom: 10px;">
                    <input class="form-check-input product-checkbox" type="checkbox" value="${product.ProductId._id}" id="product-${product.ProductId._id}">
                    <label class="form-check-label" for="product-${product.ProductId._id}" style="margin-left: 5px;">
                        ${product.ProductId.Name} - ₹${product.Price}
                    </label>
                </div>
            `;
        }).join('');

        // Show the SweetAlert modal with dynamically generated checkboxes and "Cancel Full Order" option
        Swal.fire({
            title: 'Select Products to Cancel or Cancel Full Order',
            html: `
                <form id="cancelProductForm" style="text-align: left;">
                    <p>Select the products you want to cancel:</p>
                    ${productSelectionHtml}
                    <hr>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="cancelFullOrder">
                        <label class="form-check-label" for="cancelFullOrder" style="font-weight: bold; margin-left: 5px;">
                            Cancel the Full Order
                        </label>
                    </div>
                </form>
            `,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Cancel Selected',
            cancelButtonText: 'No, keep them',
            customClass: {
                confirmButton: 'btn btn-danger',
                cancelButton: 'btn btn-secondary'
            },
            buttonsStyling: false,
            didOpen: () => {
                // Add event listener to "Cancel Full Order" checkbox to disable/enable individual product checkboxes
                document.getElementById('cancelFullOrder').addEventListener('change', function () {
                    const productCheckboxes = document.querySelectorAll('.product-checkbox');
                    productCheckboxes.forEach(checkbox => checkbox.disabled = this.checked);
                });
            },
            preConfirm: () => {
                // Check if the "Cancel Full Order" is selected
                const cancelFullOrder = document.getElementById('cancelFullOrder').checked;

                // Gather selected product IDs if "Cancel Full Order" is not checked
                let selectedProducts = [];
                if (!cancelFullOrder) {
                    selectedProducts = Array.from(document.querySelectorAll('.product-checkbox:checked'))
                        .map(input => input.value); // Use the value (ProductId._id)

                    // Ensure at least one product is selected if "Cancel Full Order" is not checked
                    if (selectedProducts.length === 0) {
                        Swal.showValidationMessage('Please select at least one product or cancel the full order.');
                        return false;
                    }
                }

                console.log('Submitting cancellation for products:', { selectedProducts, cancelFullOrder });

                return { selectedProducts, cancelFullOrder };
            }
        }).then((result) => {
            if (result.isConfirmed) {
                // Create a form to submit selected product IDs or full order cancellation to the server
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = `/myaccount/cancel-order/${orderId}`;

                // If "Cancel Full Order" is selected, add a hidden input to indicate full order cancellation
                if (result.value.cancelFullOrder) {
                    const fullOrderInput = document.createElement('input');
                    fullOrderInput.type = 'hidden';
                    fullOrderInput.name = 'cancelFullOrder';
                    fullOrderInput.value = true;
                    form.appendChild(fullOrderInput);
                } else {
                    // Otherwise, submit the selected product IDs
                    result.value.selectedProducts.forEach(productId => {
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'selectedProducts[]';
                        input.value = productId;
                        form.appendChild(input);
                    });
                }

                document.body.appendChild(form);
                form.submit();
            }
        });
    }
}
</script>
<script>
function openReturnModal(orderId, productId, productName) {
    Swal.fire({
        title: `Return ${productName}`,
        html: `
            <form id="returnForm-${orderId}-${productId}" action="/myaccount/return-order/${orderId}" method="POST">
                <input type="hidden" name="productId" value="${productId}"> <!-- Hidden input for product ID -->
                <p>Why do you want to return this Product?</p>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="returnReason" id="quality-${orderId}" value="Quality Issue,Damaged">
                    <label class="form-check-label" for="quality-${orderId}" style="display: inline-block; text-align: left; width: 100%;">Quality Issue,Damaged</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="returnReason" id="wrong-product-${orderId}" value="Bought the wrong product">
                    <label class="form-check-label" for="wrong-product-${orderId}" style="display: inline-block; text-align: left; width: 100%;">Bought the wrong product</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="returnReason" id="arrived-late-${orderId}" value="Arrived too late">
                    <label class="form-check-label" for="arrived-late-${orderId}" style="display: inline-block; text-align: left; width: 100%;">Arrived too late</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="returnReason" id="impulse-purchase-${orderId}" value="Changed mind or impulse purchase">
                    <label class="form-check-label" for="impulse-purchase-${orderId}" style="display: inline-block; text-align: left; width: 100%;">Changed mind or impulse purchase</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="returnReason" id="other-${orderId}" value="Other">
                    <label class="form-check-label" for="other-${orderId}" style="display: inline-block; text-align: left; width: 100%;">Other</label>
                </div>
                <div class="form-group">
                    <label for="comments-${orderId}-${productId}" style="text-align: left;">Additional Comments:</label>
                    <textarea class="form-control" id="comments-${orderId}-${productId}" name="comments"></textarea>
                </div>
            </form>
        `,
        showCancelButton: true,
        confirmButtonText: 'Submit Return Request',
        preConfirm: () => {
            // Validate at least one radio button is checked
            const checkedRadio = Array.from(document.querySelectorAll(`#returnForm-${orderId}-${productId} input[name="returnReason"]:checked`));
            if (checkedRadio.length === 0) {
                Swal.showValidationMessage('Please select at least one reason for returning the order.');
                return false; // Prevent the form from submitting
            }
            // Submit the form via JavaScript
            const comments = document.getElementById(`comments-${orderId}-${productId}`).value; // Get the comments
            document.getElementById(`returnForm-${orderId}-${productId}`).submit();
        }
    });

    // Add custom CSS for checkbox borders
    const style = document.createElement('style');
    style.innerHTML = `
        .form-check-input {
            border: 1px solid #888; /* Darker border color */
            border-radius: 4px; /* Optional: adjust border radius */
        }
        .form-check-input:checked {
            background-color: #007bff; /* Customize checked background color */
            border-color: #0056b3; /* Customize checked border color */
        }
    `;
    document.head.appendChild(style);
}
</script>
<script>
    document.getElementById('search-input').addEventListener('input', function () {
    const query = this.value.trim();
    
    if (query.length > 0) {
        fetch(`/search?query=${encodeURIComponent(query)}`)
            .then(response => response.json())
            .then(data => {
                const searchResults = document.getElementById('search-results');
                searchResults.innerHTML = '';  // Clear previous results
                
                if (data.length > 0) {
                    searchResults.style.display = 'block';
                    data.forEach(product => {
                        const resultItem = document.createElement('a');
                        resultItem.href = `/home/product/${product._id}`;
                        resultItem.classList.add('search-result-item');

                        // Check if the product is sold out
                        let productContent = '';
                        if (product.Quantity === 0) {
                            // Sold out: show a faded style and "Sold Out" text
                            resultItem.classList.add('sold-out'); // Apply the "sold-out" class
                            productContent = `
                                <img src="/static/uploads/${product.Images[0]}" alt="image">
                                <div class="details">
                                    <span class="name">${product.Name}</span>
                                    <span >${product.Author}</span>
                                    <span class="sold-out-text">Sold Out</span>
                                </div>
                            `;
                        } else {
                            // Available: show the product price
                            productContent = `
                                <img src="/static/uploads/${product.Images[0]}" alt="image">
                                <div class="details">
                                    <span class="name">${product.Name}</span>
                                    <span >${product.Author}</span>
                                    <span class="price">$${product.Price}</span>
                                </div>
                            `;
                        }

                        resultItem.innerHTML = productContent;
                        searchResults.appendChild(resultItem);
                    });
                } else {
                    searchResults.style.display = 'block';
                    searchResults.innerHTML = '<div class="no-results">No results found</div>';
                }
            })
            .catch(error => console.error('Error fetching search results:', error));
    } else {
        document.getElementById('search-results').style.display = 'none';
    }
});

// Hide search results when clicking outside
document.addEventListener('click', function (e) {
    const searchBar = document.querySelector('.search-bar');
    if (!searchBar.contains(e.target)) {
        document.getElementById('search-results').style.display = 'none';
    }
});
</script>
</body>
</html>